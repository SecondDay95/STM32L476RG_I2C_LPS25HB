
11_I2C_LPS25HB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d40  08004d40  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d40  08004d40  00005d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d48  08004d48  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004db8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004db8  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efa3  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234c  00000000  00000000  0001503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00017388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  000180e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002766a  00000000  00000000  00018b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c29  00000000  00000000  00040190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec5b6  00000000  00000000  00051db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d84  00000000  00000000  0013e3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00142138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c7c 	.word	0x08004c7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c7c 	.word	0x08004c7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <MX_GPIO_Init+0x5c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <MX_GPIO_Init+0x5c>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <MX_GPIO_Init+0x5c>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <MX_GPIO_Init+0x5c>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <MX_GPIO_Init+0x5c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_GPIO_Init+0x5c>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_GPIO_Init+0x5c>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a08      	ldr	r2, [pc, #32]	@ (80005bc <MX_GPIO_Init+0x5c>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_GPIO_Init+0x5c>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000638 <MX_I2C1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005cc:	4a1b      	ldr	r2, [pc, #108]	@ (800063c <MX_I2C1_Init+0x7c>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fa:	480e      	ldr	r0, [pc, #56]	@ (8000634 <MX_I2C1_Init+0x74>)
 80005fc:	f000 fe08 	bl	8001210 <HAL_I2C_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000606:	f000 f93b 	bl	8000880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <MX_I2C1_Init+0x74>)
 800060e:	f001 fa23 	bl	8001a58 <HAL_I2CEx_ConfigAnalogFilter>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000618:	f000 f932 	bl	8000880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061c:	2100      	movs	r1, #0
 800061e:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_I2C1_Init+0x74>)
 8000620:	f001 fa65 	bl	8001aee <HAL_I2CEx_ConfigDigitalFilter>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f929 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000084 	.word	0x20000084
 8000638:	40005400 	.word	0x40005400
 800063c:	10d19ce4 	.word	0x10d19ce4

08000640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0ac      	sub	sp, #176	@ 0xb0
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2288      	movs	r2, #136	@ 0x88
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fd87 	bl	8004174 <memset>
  if(i2cHandle->Instance==I2C1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <HAL_I2C_MspInit+0xb0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d13a      	bne.n	80006e6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000670:	2340      	movs	r3, #64	@ 0x40
 8000672:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f8f7 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000688:	f000 f8fa 	bl	8000880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000690:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 800069a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006a4:	23c0      	movs	r3, #192	@ 0xc0
 80006a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006aa:	2312      	movs	r3, #18
 80006ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006bc:	2304      	movs	r3, #4
 80006be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006c6:	4619      	mov	r1, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <HAL_I2C_MspInit+0xb8>)
 80006ca:	f000 fbf7 	bl	8000ebc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_I2C_MspInit+0xb4>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	37b0      	adds	r7, #176	@ 0xb0
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005400 	.word	0x40005400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400

080006fc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d102      	bne.n	8000710 <__io_putchar+0x14>
    __io_putchar('\r');
 800070a:	200d      	movs	r0, #13
 800070c:	f7ff fff6 	bl	80006fc <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000710:	1d39      	adds	r1, r7, #4
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <__io_putchar+0x2c>)
 800071a:	f002 fdc3 	bl	80032a4 <HAL_UART_Transmit>

  return 1;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000dc 	.word	0x200000dc

0800072c <lps_read_reg>:

//Funkcja odczytujaca zawartosc rejestru czujnika LPS25HB:
uint8_t lps_read_reg(uint8_t reg) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af04      	add	r7, sp, #16
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]

	uint8_t value = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	b29a      	uxth	r2, r3
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	9302      	str	r3, [sp, #8]
 8000744:	2301      	movs	r3, #1
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	f107 030f 	add.w	r3, r7, #15
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	21ba      	movs	r1, #186	@ 0xba
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <lps_read_reg+0x38>)
 8000754:	f000 fdf8 	bl	8001348 <HAL_I2C_Mem_Read>

	return value;
 8000758:	7bfb      	ldrb	r3, [r7, #15]

}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000084 	.word	0x20000084

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fa4a 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f823 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f7ff fef3 	bl	8000560 <MX_GPIO_Init>
  MX_I2C1_Init();
 800077a:	f7ff ff21 	bl	80005c0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800077e:	f000 f98d 	bl	8000a9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Searching...\n");
 8000782:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <main+0x48>)
 8000784:	f003 fc16 	bl	8003fb4 <puts>
  uint8_t who_am_i = lps_read_reg(LPS25HB_WHO_AM_I);
 8000788:	200f      	movs	r0, #15
 800078a:	f7ff ffcf 	bl	800072c <lps_read_reg>
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]

  if(who_am_i == 0xBD) {
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2bbd      	cmp	r3, #189	@ 0xbd
 8000796:	d103      	bne.n	80007a0 <main+0x38>
	  printf("Found: LPS25HB\n");
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <main+0x4c>)
 800079a:	f003 fc0b 	bl	8003fb4 <puts>
 800079e:	e005      	b.n	80007ac <main+0x44>
  }
  else {
	  printf("Error (0x%02X)\n", who_am_i);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <main+0x50>)
 80007a6:	f003 fb9d 	bl	8003ee4 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <main+0x44>
 80007b0:	08004c94 	.word	0x08004c94
 80007b4:	08004ca4 	.word	0x08004ca4
 80007b8:	08004cb4 	.word	0x08004cb4

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	@ 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fcd2 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e2:	f001 f9ef 	bl	8001bc4 <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 f848 	bl	8000880 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f0:	f001 f9ca 	bl	8001b88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <SystemClock_Config+0xc0>)
 80007f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007fa:	4a20      	ldr	r2, [pc, #128]	@ (800087c <SystemClock_Config+0xc0>)
 80007fc:	f023 0318 	bic.w	r3, r3, #24
 8000800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000804:	2314      	movs	r3, #20
 8000806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	@ 0x60
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000824:	2328      	movs	r3, #40	@ 0x28
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fa19 	bl	8001c70 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000844:	f000 f81c 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fde1 	bl	8002428 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800086c:	f000 f808 	bl	8000880 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000870:	f002 fae8 	bl	8002e44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	@ 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f9c1 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e00a      	b.n	800095a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000944:	f3af 8000 	nop.w
 8000948:	4601      	mov	r1, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	60ba      	str	r2, [r7, #8]
 8000950:	b2ca      	uxtb	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3301      	adds	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	dbf0      	blt.n	8000944 <_read+0x12>
  }

  return len;
 8000962:	687b      	ldr	r3, [r7, #4]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e009      	b.n	8000992 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	60ba      	str	r2, [r7, #8]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff feb8 	bl	80006fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbf1      	blt.n	800097e <_write+0x12>
  }
  return len;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_close>:

int _close(int file)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009cc:	605a      	str	r2, [r3, #4]
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_isatty>:

int _isatty(int file)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f003 fbe8 	bl	8004210 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20018000 	.word	0x20018000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	200000d8 	.word	0x200000d8
 8000a74:	200002b8 	.word	0x200002b8

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <MX_USART2_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_USART2_UART_Init+0x58>)
 8000ae0:	f002 fb92 	bl	8003208 <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f7ff fec9 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000dc 	.word	0x200000dc
 8000af8:	40004400 	.word	0x40004400

08000afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0ac      	sub	sp, #176	@ 0xb0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2288      	movs	r2, #136	@ 0x88
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fb29 	bl	8004174 <memset>
  if(uartHandle->Instance==USART2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a21      	ldr	r2, [pc, #132]	@ (8000bac <HAL_UART_MspInit+0xb0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d13b      	bne.n	8000ba4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fe99 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff fe9c 	bl	8000880 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4c:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b64:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b90:	2307      	movs	r3, #7
 8000b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f000 f98c 	bl	8000ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	37b0      	adds	r7, #176	@ 0xb0
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff ff5e 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 fb1b 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fdbf 	bl	8000768 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bf8:	08004d50 	.word	0x08004d50
  ldr r2, =_sbss
 8000bfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c00:	200002b4 	.word	0x200002b4

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>

08000c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f91f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f80e 	bl	8000c38 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c28:	f7ff fe30 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_InitTick+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d023      	beq.n	8000c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <HAL_InitTick+0x70>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f91d 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10f      	bne.n	8000c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d809      	bhi.n	8000c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f8f5 	bl	8000e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_InitTick+0x74>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e004      	b.n	8000c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e001      	b.n	8000c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000164 	.word	0x20000164

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000164 	.word	0x20000164

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff47 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff5c 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffb0 	bl	8000e10 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e17f      	b.n	80011cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8171 	beq.w	80011c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d118      	bne.n	8000f9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	6939      	ldr	r1, [r7, #16]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80ac 	beq.w	80011c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b5f      	ldr	r3, [pc, #380]	@ (80011ec <HAL_GPIO_Init+0x330>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	4a5e      	ldr	r2, [pc, #376]	@ (80011ec <HAL_GPIO_Init+0x330>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	@ 0x60
 800107a:	4b5c      	ldr	r3, [pc, #368]	@ (80011ec <HAL_GPIO_Init+0x330>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001086:	4a5a      	ldr	r2, [pc, #360]	@ (80011f0 <HAL_GPIO_Init+0x334>)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x242>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	@ (80011f4 <HAL_GPIO_Init+0x338>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x23e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	@ (80011f8 <HAL_GPIO_Init+0x33c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x23a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	@ (80011fc <HAL_GPIO_Init+0x340>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x236>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <HAL_GPIO_Init+0x344>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x232>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001204 <HAL_GPIO_Init+0x348>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x22e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001208 <HAL_GPIO_Init+0x34c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x22a>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x244>
 80010fe:	2300      	movs	r3, #0
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001110:	4937      	ldr	r1, [pc, #220]	@ (80011f0 <HAL_GPIO_Init+0x334>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_GPIO_Init+0x350>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001142:	4a32      	ldr	r2, [pc, #200]	@ (800120c <HAL_GPIO_Init+0x350>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <HAL_GPIO_Init+0x350>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <HAL_GPIO_Init+0x350>)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <HAL_GPIO_Init+0x350>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <HAL_GPIO_Init+0x350>)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <HAL_GPIO_Init+0x350>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c0:	4a12      	ldr	r2, [pc, #72]	@ (800120c <HAL_GPIO_Init+0x350>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae78 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010000 	.word	0x40010000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	48001000 	.word	0x48001000
 8001204:	48001400 	.word	0x48001400
 8001208:	48001800 	.word	0x48001800
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e08d      	b.n	800133e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fa02 	bl	8000640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	e006      	b.n	8001298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d108      	bne.n	80012b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	e007      	b.n	80012c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69d9      	ldr	r1, [r3, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af02      	add	r7, sp, #8
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4603      	mov	r3, r0
 8001358:	817b      	strh	r3, [r7, #10]
 800135a:	460b      	mov	r3, r1
 800135c:	813b      	strh	r3, [r7, #8]
 800135e:	4613      	mov	r3, r2
 8001360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b20      	cmp	r3, #32
 800136c:	f040 80fd 	bne.w	800156a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <HAL_I2C_Mem_Read+0x34>
 8001376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001382:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0f1      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_I2C_Mem_Read+0x4e>
 8001392:	2302      	movs	r3, #2
 8001394:	e0ea      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800139e:	f7ff fc9b 	bl	8000cd8 <HAL_GetTick>
 80013a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2319      	movs	r3, #25
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f000 f95b 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0d5      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2222      	movs	r2, #34	@ 0x22
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2240      	movs	r2, #64	@ 0x40
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a3a      	ldr	r2, [r7, #32]
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e8:	88f8      	ldrh	r0, [r7, #6]
 80013ea:	893a      	ldrh	r2, [r7, #8]
 80013ec:	8979      	ldrh	r1, [r7, #10]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4603      	mov	r3, r0
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f8bf 	bl	800157c <I2C_RequestMemoryRead>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0ad      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d90e      	bls.n	8001438 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2201      	movs	r2, #1
 800141e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001424:	b2da      	uxtb	r2, r3
 8001426:	8979      	ldrh	r1, [r7, #10]
 8001428:	4b52      	ldr	r3, [pc, #328]	@ (8001574 <HAL_I2C_Mem_Read+0x22c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 fadf 	bl	80019f4 <I2C_TransferConfig>
 8001436:	e00f      	b.n	8001458 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001446:	b2da      	uxtb	r2, r3
 8001448:	8979      	ldrh	r1, [r7, #10]
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <HAL_I2C_Mem_Read+0x22c>)
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 face 	bl	80019f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800145e:	2200      	movs	r2, #0
 8001460:	2104      	movs	r1, #4
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f902 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e07c      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148e:	3b01      	subs	r3, #1
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	3b01      	subs	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d034      	beq.n	8001518 <HAL_I2C_Mem_Read+0x1d0>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d130      	bne.n	8001518 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014bc:	2200      	movs	r2, #0
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f000 f8d3 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e04d      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2bff      	cmp	r3, #255	@ 0xff
 80014d8:	d90e      	bls.n	80014f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	8979      	ldrh	r1, [r7, #10]
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fa7f 	bl	80019f4 <I2C_TransferConfig>
 80014f6:	e00f      	b.n	8001518 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001506:	b2da      	uxtb	r2, r3
 8001508:	8979      	ldrh	r1, [r7, #10]
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 fa6e 	bl	80019f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d19a      	bne.n	8001458 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f940 	bl	80017ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e01a      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2220      	movs	r2, #32
 800153c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_I2C_Mem_Read+0x230>)
 800154a:	400b      	ands	r3, r1
 800154c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800156a:	2302      	movs	r3, #2
  }
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	80002400 	.word	0x80002400
 8001578:	fe00e800 	.word	0xfe00e800

0800157c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	817b      	strh	r3, [r7, #10]
 800158e:	460b      	mov	r3, r1
 8001590:	813b      	strh	r3, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	8979      	ldrh	r1, [r7, #10]
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <I2C_RequestMemoryRead+0xa4>)
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fa26 	bl	80019f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f8b6 	bl	800171e <I2C_WaitOnTXISFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e02c      	b.n	8001616 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d105      	bne.n	80015ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015c2:	893b      	ldrh	r3, [r7, #8]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80015cc:	e015      	b.n	80015fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015ce:	893b      	ldrh	r3, [r7, #8]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f89c 	bl	800171e <I2C_WaitOnTXISFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e012      	b.n	8001616 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2200      	movs	r2, #0
 8001602:	2140      	movs	r1, #64	@ 0x40
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f831 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	80002000 	.word	0x80002000

08001624 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d103      	bne.n	8001642 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d007      	beq.n	8001660 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699a      	ldr	r2, [r3, #24]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	619a      	str	r2, [r3, #24]
  }
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800167c:	e03b      	b.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f8d6 	bl	8001834 <I2C_IsErrorOccurred>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e041      	b.n	8001716 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d02d      	beq.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7ff fb1d 	bl	8000cd8 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d302      	bcc.n	80016b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d122      	bne.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	4013      	ands	r3, r2
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	429a      	cmp	r2, r3
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d113      	bne.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f043 0220 	orr.w	r2, r3, #32
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4013      	ands	r3, r2
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	429a      	cmp	r2, r3
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	429a      	cmp	r2, r3
 8001712:	d0b4      	beq.n	800167e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800172a:	e033      	b.n	8001794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f87f 	bl	8001834 <I2C_IsErrorOccurred>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e031      	b.n	80017a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d025      	beq.n	8001794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001748:	f7ff fac6 	bl	8000cd8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11a      	bne.n	8001794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b02      	cmp	r3, #2
 800176a:	d013      	beq.n	8001794 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2220      	movs	r2, #32
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e007      	b.n	80017a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1c4      	bne.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b8:	e02f      	b.n	800181a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f838 	bl	8001834 <I2C_IsErrorOccurred>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e02d      	b.n	800182a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ce:	f7ff fa83 	bl	8000cd8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11a      	bne.n	800181a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d013      	beq.n	800181a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f043 0220 	orr.w	r2, r3, #32
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e007      	b.n	800182a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b20      	cmp	r3, #32
 8001826:	d1c8      	bne.n	80017ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	2b00      	cmp	r3, #0
 800185e:	d068      	beq.n	8001932 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2210      	movs	r2, #16
 8001866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001868:	e049      	b.n	80018fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d045      	beq.n	80018fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001872:	f7ff fa31 	bl	8000cd8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	429a      	cmp	r2, r3
 8001880:	d302      	bcc.n	8001888 <I2C_IsErrorOccurred+0x54>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d13a      	bne.n	80018fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800189a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018aa:	d121      	bne.n	80018f0 <I2C_IsErrorOccurred+0xbc>
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018b2:	d01d      	beq.n	80018f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d01a      	beq.n	80018f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018ca:	f7ff fa05 	bl	8000cd8 <HAL_GetTick>
 80018ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d0:	e00e      	b.n	80018f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018d2:	f7ff fa01 	bl	8000cd8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b19      	cmp	r3, #25
 80018de:	d907      	bls.n	80018f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f043 0320 	orr.w	r3, r3, #32
 80018e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80018ee:	e006      	b.n	80018fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d1e9      	bne.n	80018d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	2b20      	cmp	r3, #32
 800190a:	d003      	beq.n	8001914 <I2C_IsErrorOccurred+0xe0>
 800190c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0aa      	beq.n	800186a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2220      	movs	r2, #32
 8001922:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001976:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80019a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01c      	beq.n	80019e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7ff fe3b 	bl	8001624 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <I2C_IsErrorOccurred+0x1bc>)
 80019ba:	400b      	ands	r3, r1
 80019bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80019e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	fe00e800 	.word	0xfe00e800

080019f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	817b      	strh	r3, [r7, #10]
 8001a02:	4613      	mov	r3, r2
 8001a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a0c:	7a7b      	ldrb	r3, [r7, #9]
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	0d5b      	lsrs	r3, r3, #21
 8001a2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <I2C_TransferConfig+0x60>)
 8001a34:	430b      	orrs	r3, r1
 8001a36:	43db      	mvns	r3, r3
 8001a38:	ea02 0103 	and.w	r1, r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	03ff63ff 	.word	0x03ff63ff

08001a58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	d138      	bne.n	8001ae0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e032      	b.n	8001ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	@ 0x24
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d139      	bne.n	8001b78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e033      	b.n	8001b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2224      	movs	r2, #36	@ 0x24
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e000      	b.n	8001b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bd2:	d130      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001be0:	d038      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bea:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2232      	movs	r2, #50	@ 0x32
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	e002      	b.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c10:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1c:	d102      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f2      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c30:	d110      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e00f      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d007      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c4c:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e3ca      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b97      	ldr	r3, [pc, #604]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e4 	beq.w	8001e6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_RCC_OscConfig+0x4a>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	f040 808b 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 8087 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	4b89      	ldr	r3, [pc, #548]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e3a2      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_RCC_OscConfig+0x7c>
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_OscConfig+0x88>
 8001cec:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d223      	bcs.n	8001d44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fd55 	bl	80027b0 <RCC_SetFlashLatencyFromMSIRange>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e383      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d10:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a72      	ldr	r2, [pc, #456]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b70      	ldr	r3, [pc, #448]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	496d      	ldr	r1, [pc, #436]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4968      	ldr	r1, [pc, #416]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	e025      	b.n	8001d90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a65      	ldr	r2, [pc, #404]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4960      	ldr	r1, [pc, #384]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	495b      	ldr	r1, [pc, #364]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fd15 	bl	80027b0 <RCC_SetFlashLatencyFromMSIRange>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e343      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d90:	f000 fc4a 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b52      	ldr	r3, [pc, #328]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	4950      	ldr	r1, [pc, #320]	@ (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <HAL_RCC_OscConfig+0x278>)
 8001dae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001db0:	4b4e      	ldr	r3, [pc, #312]	@ (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe ff3f 	bl	8000c38 <HAL_InitTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d052      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	e327      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d032      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ff7c 	bl	8000cd8 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de4:	f7fe ff78 	bl	8000cd8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e310      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a36      	ldr	r2, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4931      	ldr	r1, [pc, #196]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	492c      	ldr	r1, [pc, #176]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e01a      	b.n	8001e6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e42:	f7fe ff49 	bl	8000cd8 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4a:	f7fe ff45 	bl	8000cd8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e2dd      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1da>
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d074      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x21a>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d10e      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d064      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d160      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e2ba      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x24a>
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e026      	b.n	8001f08 <HAL_RCC_OscConfig+0x298>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec2:	d115      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x280>
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a02      	ldr	r2, [pc, #8]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x298>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08004cc4 	.word	0x08004cc4
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a9f      	ldr	r2, [pc, #636]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b9d      	ldr	r3, [pc, #628]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a9c      	ldr	r2, [pc, #624]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe fee2 	bl	8000cd8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fede 	bl	8000cd8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e276      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2a8>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe fece 	bl	8000cd8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe feca 	bl	8000cd8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	@ 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e262      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f52:	4b88      	ldr	r3, [pc, #544]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2d0>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d060      	beq.n	8002030 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x310>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	4b7c      	ldr	r3, [pc, #496]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x328>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e23f      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b76      	ldr	r3, [pc, #472]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	4973      	ldr	r1, [pc, #460]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fac:	e040      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d023      	beq.n	8001ffe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6e      	ldr	r2, [pc, #440]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fe89 	bl	8000cd8 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7fe fe85 	bl	8000cd8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e21d      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	4b65      	ldr	r3, [pc, #404]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b62      	ldr	r3, [pc, #392]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	495f      	ldr	r1, [pc, #380]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5c      	ldr	r2, [pc, #368]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fe65 	bl	8000cd8 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7fe fe61 	bl	8000cd8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1f9      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204a:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe fe40 	bl	8000cd8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe fe3c 	bl	8000cd8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1d4      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x3ec>
 800207c:	e01b      	b.n	80020b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002084:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe fe23 	bl	8000cd8 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7fe fe1f 	bl	8000cd8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1b7      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a8:	4b32      	ldr	r3, [pc, #200]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ef      	bne.n	8002096 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80a6 	beq.w	8002210 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	4a26      	ldr	r2, [pc, #152]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e0:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_RCC_OscConfig+0x508>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d118      	bne.n	800212e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_RCC_OscConfig+0x508>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_RCC_OscConfig+0x508>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002108:	f7fe fde6 	bl	8000cd8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7fe fde2 	bl	8000cd8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e17a      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_RCC_OscConfig+0x508>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x4d8>
 8002136:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002146:	e029      	b.n	800219c <HAL_RCC_OscConfig+0x52c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d115      	bne.n	800217c <HAL_RCC_OscConfig+0x50c>
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002156:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <HAL_RCC_OscConfig+0x504>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x52c>
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	4b9c      	ldr	r3, [pc, #624]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	4a9b      	ldr	r2, [pc, #620]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800218c:	4b98      	ldr	r3, [pc, #608]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002192:	4a97      	ldr	r2, [pc, #604]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d016      	beq.n	80021d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fd98 	bl	8000cd8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe fd94 	bl	8000cd8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e12a      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c2:	4b8b      	ldr	r3, [pc, #556]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ed      	beq.n	80021ac <HAL_RCC_OscConfig+0x53c>
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7fe fd81 	bl	8000cd8 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fd7d 	bl	8000cd8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e113      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f0:	4b7f      	ldr	r3, [pc, #508]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ed      	bne.n	80021da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b7a      	ldr	r3, [pc, #488]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	4a79      	ldr	r2, [pc, #484]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80fe 	beq.w	8002416 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	2b02      	cmp	r3, #2
 8002220:	f040 80d0 	bne.w	80023c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002224:	4b72      	ldr	r3, [pc, #456]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	429a      	cmp	r2, r3
 8002236:	d130      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	3b01      	subs	r3, #1
 8002244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d127      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002254:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d11f      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002264:	2a07      	cmp	r2, #7
 8002266:	bf14      	ite	ne
 8002268:	2201      	movne	r2, #1
 800226a:	2200      	moveq	r2, #0
 800226c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d109      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d06e      	beq.n	8002378 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d069      	beq.n	8002374 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ac:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0ad      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022bc:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c8:	f7fe fd06 	bl	8000cd8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fd02 	bl	8000cd8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e09a      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b43      	ldr	r3, [pc, #268]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ee:	4b40      	ldr	r3, [pc, #256]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b40      	ldr	r3, [pc, #256]	@ (80023f4 <HAL_RCC_OscConfig+0x784>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022fe:	3a01      	subs	r2, #1
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002308:	0212      	lsls	r2, r2, #8
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002310:	0852      	lsrs	r2, r2, #1
 8002312:	3a01      	subs	r2, #1
 8002314:	0552      	lsls	r2, r2, #21
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800231c:	0852      	lsrs	r2, r2, #1
 800231e:	3a01      	subs	r2, #1
 8002320:	0652      	lsls	r2, r2, #25
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002328:	0912      	lsrs	r2, r2, #4
 800232a:	0452      	lsls	r2, r2, #17
 800232c:	430a      	orrs	r2, r1
 800232e:	4930      	ldr	r1, [pc, #192]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002334:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2d      	ldr	r2, [pc, #180]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002340:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a2a      	ldr	r2, [pc, #168]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800234c:	f7fe fcc4 	bl	8000cd8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fcc0 	bl	8000cd8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e058      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002372:	e050      	b.n	8002416 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e04f      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d148      	bne.n	8002416 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a16      	ldr	r2, [pc, #88]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800239c:	f7fe fc9c 	bl	8000cd8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fc98 	bl	8000cd8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e030      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x734>
 80023c2:	e028      	b.n	8002416 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d023      	beq.n	8002412 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <HAL_RCC_OscConfig+0x780>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fc7f 	bl	8000cd8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e00c      	b.n	80023f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fc7b 	bl	8000cd8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d905      	bls.n	80023f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_RCC_OscConfig+0x7b0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ec      	bne.n	80023de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_RCC_OscConfig+0x7b0>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4905      	ldr	r1, [pc, #20]	@ (8002420 <HAL_RCC_OscConfig+0x7b0>)
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_OscConfig+0x7b4>)
 800240c:	4013      	ands	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
 8002410:	e001      	b.n	8002416 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	feeefffc 	.word	0xfeeefffc

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0e7      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b75      	ldr	r3, [pc, #468]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d910      	bls.n	800246c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b72      	ldr	r3, [pc, #456]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0207 	bic.w	r2, r3, #7
 8002452:	4970      	ldr	r1, [pc, #448]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b6e      	ldr	r3, [pc, #440]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0cf      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002484:	429a      	cmp	r2, r3
 8002486:	d908      	bls.n	800249a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b63      	ldr	r3, [pc, #396]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4960      	ldr	r1, [pc, #384]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04c      	beq.n	8002540 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0a6      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4b54      	ldr	r3, [pc, #336]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e09a      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024de:	4b4e      	ldr	r3, [pc, #312]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e08e      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e086      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b46      	ldr	r3, [pc, #280]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4943      	ldr	r1, [pc, #268]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fbe2 	bl	8000cd8 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fbde 	bl	8000cd8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e06e      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	429a      	cmp	r2, r3
 800255a:	d208      	bcs.n	800256e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b2e      	ldr	r3, [pc, #184]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	492b      	ldr	r1, [pc, #172]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256e:	4b29      	ldr	r3, [pc, #164]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d210      	bcs.n	800259e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257c:	4b25      	ldr	r3, [pc, #148]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 0207 	bic.w	r2, r3, #7
 8002584:	4923      	ldr	r1, [pc, #140]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258c:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <HAL_RCC_ClockConfig+0x1ec>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e036      	b.n	800260c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4918      	ldr	r1, [pc, #96]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c8:	4b13      	ldr	r3, [pc, #76]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4910      	ldr	r1, [pc, #64]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025dc:	f000 f824 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	490b      	ldr	r1, [pc, #44]	@ (800261c <HAL_RCC_ClockConfig+0x1f4>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	4a09      	ldr	r2, [pc, #36]	@ (8002620 <HAL_RCC_ClockConfig+0x1f8>)
 80025fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025fc:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_RCC_ClockConfig+0x1fc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fb19 	bl	8000c38 <HAL_InitTick>
 8002606:	4603      	mov	r3, r0
 8002608:	72fb      	strb	r3, [r7, #11]

  return status;
 800260a:	7afb      	ldrb	r3, [r7, #11]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	08004cc4 	.word	0x08004cc4
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	4b3e      	ldr	r3, [pc, #248]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002640:	4b3b      	ldr	r3, [pc, #236]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x34>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d121      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11e      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800265c:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002668:	4b31      	ldr	r3, [pc, #196]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e005      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026a0:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e004      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d134      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0xa6>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d003      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xac>
 80026cc:	e005      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x110>)
 80026d0:	617b      	str	r3, [r7, #20]
      break;
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_GetSysClockFreq+0x114>)
 80026d6:	617b      	str	r3, [r7, #20]
      break;
 80026d8:	e002      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	617b      	str	r3, [r7, #20]
      break;
 80026de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	3301      	adds	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	fb03 f202 	mul.w	r2, r3, r2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0e5b      	lsrs	r3, r3, #25
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	3301      	adds	r3, #1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	@ 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	08004cdc 	.word	0x08004cdc
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4904      	ldr	r1, [pc, #16]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	08004cd4 	.word	0x08004cd4

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002788:	f7ff ffda 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4904      	ldr	r1, [pc, #16]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08004cd4 	.word	0x08004cd4

080027b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c8:	f7ff f9ee 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 80027cc:	6178      	str	r0, [r7, #20]
 80027ce:	e014      	b.n	80027fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	4a24      	ldr	r2, [pc, #144]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	@ 0x58
 80027dc:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e8:	f7ff f9de 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 80027ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002800:	d10b      	bne.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b80      	cmp	r3, #128	@ 0x80
 8002806:	d919      	bls.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2ba0      	cmp	r3, #160	@ 0xa0
 800280c:	d902      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800280e:	2302      	movs	r3, #2
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e013      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002814:	2301      	movs	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e010      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b80      	cmp	r3, #128	@ 0x80
 800281e:	d902      	bls.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002820:	2303      	movs	r3, #3
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	e00a      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	@ 0x80
 800282a:	d102      	bne.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e004      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b70      	cmp	r3, #112	@ 0x70
 8002836:	d101      	bne.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	4909      	ldr	r1, [pc, #36]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002878:	2300      	movs	r3, #0
 800287a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800287c:	2300      	movs	r3, #0
 800287e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002888:	2b00      	cmp	r3, #0
 800288a:	d041      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002890:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002894:	d02a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002896:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800289a:	d824      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800289c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028a6:	d81e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b0:	d010      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028b2:	e018      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b4:	4b86      	ldr	r3, [pc, #536]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a85      	ldr	r2, [pc, #532]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c0:	e015      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 facb 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d2:	e00c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3320      	adds	r3, #32
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fbb6 	bl	800304c <RCCEx_PLLSAI2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	74fb      	strb	r3, [r7, #19]
      break;
 80028ea:	e000      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002902:	4973      	ldr	r1, [pc, #460]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800290a:	e001      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d041      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002924:	d02a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002926:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800292a:	d824      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800292c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002936:	d81e      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d010      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002942:	e018      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002944:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a61      	ldr	r2, [pc, #388]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002950:	e015      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fa83 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002962:	e00c      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3320      	adds	r3, #32
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fb6e 	bl	800304c <RCCEx_PLLSAI2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	74fb      	strb	r3, [r7, #19]
      break;
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800297c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002984:	4b52      	ldr	r3, [pc, #328]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002992:	494f      	ldr	r1, [pc, #316]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a0 	beq.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029b2:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	4a40      	ldr	r2, [pc, #256]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f0:	f7fe f972 	bl	8000cd8 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f6:	e009      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe f96e 	bl	8000cd8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	74fb      	strb	r3, [r7, #19]
        break;
 8002a0a:	e005      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01f      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	4a20      	ldr	r2, [pc, #128]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a68:	4a19      	ldr	r2, [pc, #100]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe f92d 	bl	8000cd8 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	e00b      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe f929 	bl	8000cd8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d902      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	74fb      	strb	r3, [r7, #19]
            break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ec      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002abe:	4904      	ldr	r1, [pc, #16]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ac6:	e009      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
 8002acc:	e006      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002adc:	7c7b      	ldrb	r3, [r7, #17]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b9e      	ldr	r3, [pc, #632]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	4a9d      	ldr	r2, [pc, #628]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afa:	4b98      	ldr	r3, [pc, #608]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b00:	f023 0203 	bic.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	4994      	ldr	r1, [pc, #592]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	f023 020c 	bic.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	498c      	ldr	r1, [pc, #560]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3e:	4b87      	ldr	r3, [pc, #540]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4983      	ldr	r1, [pc, #524]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b60:	4b7e      	ldr	r3, [pc, #504]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	497b      	ldr	r1, [pc, #492]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b82:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	4972      	ldr	r1, [pc, #456]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba4:	4b6d      	ldr	r3, [pc, #436]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	496a      	ldr	r1, [pc, #424]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	4961      	ldr	r1, [pc, #388]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf6:	4959      	ldr	r1, [pc, #356]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0a:	4b54      	ldr	r3, [pc, #336]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c18:	4950      	ldr	r1, [pc, #320]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	4948      	ldr	r1, [pc, #288]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c4e:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	493f      	ldr	r1, [pc, #252]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c7e:	4937      	ldr	r1, [pc, #220]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
 8002c9c:	e011      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f8d8 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cce:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	491f      	ldr	r1, [pc, #124]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cee:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf8:	60d3      	str	r3, [r2, #12]
 8002cfa:	e011      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f8a9 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d02b      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a02      	ldr	r2, [pc, #8]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e014      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f877 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02f      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d9e:	4928      	ldr	r1, [pc, #160]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f854 	bl	8002e64 <RCCEx_PLLSAI1_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d014      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	74bb      	strb	r3, [r7, #18]
 8002dca:	e011      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3320      	adds	r3, #32
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f935 	bl	800304c <RCCEx_PLLSAI2_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e02:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e0a:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e2e:	4904      	ldr	r1, [pc, #16]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e72:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d018      	beq.n	8002eb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e7e:	4b72      	ldr	r3, [pc, #456]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
       ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e96:	4b6c      	ldr	r3, [pc, #432]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d047      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e044      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d018      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x86>
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d825      	bhi.n	8002f08 <RCCEx_PLLSAI1_Config+0xa4>
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x62>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d009      	beq.n	8002ed8 <RCCEx_PLLSAI1_Config+0x74>
 8002ec4:	e020      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ec6:	4b60      	ldr	r3, [pc, #384]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11d      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed6:	e01a      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d116      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee8:	e013      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eea:	4b57      	ldr	r3, [pc, #348]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ef6:	4b54      	ldr	r3, [pc, #336]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f06:	e006      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e004      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	430b      	orrs	r3, r1
 8002f34:	4944      	ldr	r1, [pc, #272]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d17d      	bne.n	800303c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f40:	4b41      	ldr	r3, [pc, #260]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a40      	ldr	r2, [pc, #256]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fd fec4 	bl	8000cd8 <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fd fec0 	bl	8000cd8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
        break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f68:	4b37      	ldr	r3, [pc, #220]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ef      	bne.n	8002f54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d160      	bne.n	800303c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d111      	bne.n	8002fa4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f80:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	0211      	lsls	r1, r2, #8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	0912      	lsrs	r2, r2, #4
 8002f98:	0452      	lsls	r2, r2, #17
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	492a      	ldr	r1, [pc, #168]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	610b      	str	r3, [r1, #16]
 8002fa2:	e027      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d112      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fb2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6892      	ldr	r2, [r2, #8]
 8002fba:	0211      	lsls	r1, r2, #8
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6912      	ldr	r2, [r2, #16]
 8002fc0:	0852      	lsrs	r2, r2, #1
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	0552      	lsls	r2, r2, #21
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	491f      	ldr	r1, [pc, #124]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
 8002fce:	e011      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	0211      	lsls	r1, r2, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6952      	ldr	r2, [r2, #20]
 8002fe6:	0852      	lsrs	r2, r2, #1
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	0652      	lsls	r2, r2, #25
 8002fec:	430a      	orrs	r2, r1
 8002fee:	4916      	ldr	r1, [pc, #88]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ff4:	4b14      	ldr	r3, [pc, #80]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd fe6a 	bl	8000cd8 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003006:	e009      	b.n	800301c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003008:	f7fd fe66 	bl	8000cd8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	73fb      	strb	r3, [r7, #15]
          break;
 800301a:	e005      	b.n	8003028 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800301c:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4904      	ldr	r1, [pc, #16]	@ (8003048 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000

0800304c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800305a:	4b6a      	ldr	r3, [pc, #424]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003066:	4b67      	ldr	r3, [pc, #412]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d10d      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
       ||
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800307e:	4b61      	ldr	r3, [pc, #388]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
       ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d047      	beq.n	8003122 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e044      	b.n	8003122 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d018      	beq.n	80030d2 <RCCEx_PLLSAI2_Config+0x86>
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d825      	bhi.n	80030f0 <RCCEx_PLLSAI2_Config+0xa4>
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d002      	beq.n	80030ae <RCCEx_PLLSAI2_Config+0x62>
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d009      	beq.n	80030c0 <RCCEx_PLLSAI2_Config+0x74>
 80030ac:	e020      	b.n	80030f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ae:	4b55      	ldr	r3, [pc, #340]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11d      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030be:	e01a      	b.n	80030f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c0:	4b50      	ldr	r3, [pc, #320]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e013      	b.n	80030fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030de:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ee:	e006      	b.n	80030fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e004      	b.n	8003100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003106:	4b3f      	ldr	r3, [pc, #252]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	430b      	orrs	r3, r1
 800311c:	4939      	ldr	r1, [pc, #228]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d167      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003128:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a35      	ldr	r2, [pc, #212]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fd fdd0 	bl	8000cd8 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800313a:	e009      	b.n	8003150 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800313c:	f7fd fdcc 	bl	8000cd8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d902      	bls.n	8003150 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e005      	b.n	800315c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003150:	4b2c      	ldr	r3, [pc, #176]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ef      	bne.n	800313c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d14a      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d111      	bne.n	800318c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003168:	4b26      	ldr	r3, [pc, #152]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6892      	ldr	r2, [r2, #8]
 8003178:	0211      	lsls	r1, r2, #8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	0912      	lsrs	r2, r2, #4
 8003180:	0452      	lsls	r2, r2, #17
 8003182:	430a      	orrs	r2, r1
 8003184:	491f      	ldr	r1, [pc, #124]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	614b      	str	r3, [r1, #20]
 800318a:	e011      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800318c:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003194:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6892      	ldr	r2, [r2, #8]
 800319c:	0211      	lsls	r1, r2, #8
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6912      	ldr	r2, [r2, #16]
 80031a2:	0852      	lsrs	r2, r2, #1
 80031a4:	3a01      	subs	r2, #1
 80031a6:	0652      	lsls	r2, r2, #25
 80031a8:	430a      	orrs	r2, r1
 80031aa:	4916      	ldr	r1, [pc, #88]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a13      	ldr	r2, [pc, #76]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fd8c 	bl	8000cd8 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031c4:	f7fd fd88 	bl	8000cd8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
          break;
 80031d6:	e005      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ef      	beq.n	80031c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4904      	ldr	r1, [pc, #16]	@ (8003204 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000

08003208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e040      	b.n	800329c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fc66 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	@ 0x24
 8003234:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fb6a 	bl	8003928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8af 	bl	80033b8 <UART_SetConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e01b      	b.n	800329c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fbe9 	bl	8003a6c <UART_CheckIdleState>
 800329a:	4603      	mov	r3, r0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	@ 0x28
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d177      	bne.n	80033ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_UART_Transmit+0x24>
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e070      	b.n	80033ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2221      	movs	r2, #33	@ 0x21
 80032d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032da:	f7fd fcfd 	bl	8000cd8 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	88fa      	ldrh	r2, [r7, #6]
 80032ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f8:	d108      	bne.n	800330c <HAL_UART_Transmit+0x68>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e003      	b.n	8003314 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003314:	e02f      	b.n	8003376 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2180      	movs	r1, #128	@ 0x80
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fc4b 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e03b      	b.n	80033ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003348:	b292      	uxth	r2, r2
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	3302      	adds	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e007      	b.n	8003364 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1c9      	bne.n	8003316 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2140      	movs	r1, #64	@ 0x40
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fc15 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e005      	b.n	80033ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b08a      	sub	sp, #40	@ 0x28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4313      	orrs	r3, r2
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4ba4      	ldr	r3, [pc, #656]	@ (8003678 <UART_SetConfig+0x2c0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a99      	ldr	r2, [pc, #612]	@ (800367c <UART_SetConfig+0x2c4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003420:	4313      	orrs	r3, r2
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a90      	ldr	r2, [pc, #576]	@ (8003680 <UART_SetConfig+0x2c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d126      	bne.n	8003490 <UART_SetConfig+0xd8>
 8003442:	4b90      	ldr	r3, [pc, #576]	@ (8003684 <UART_SetConfig+0x2cc>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d81b      	bhi.n	8003488 <UART_SetConfig+0xd0>
 8003450:	a201      	add	r2, pc, #4	@ (adr r2, 8003458 <UART_SetConfig+0xa0>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	08003479 	.word	0x08003479
 8003460:	08003471 	.word	0x08003471
 8003464:	08003481 	.word	0x08003481
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346e:	e116      	b.n	800369e <UART_SetConfig+0x2e6>
 8003470:	2302      	movs	r3, #2
 8003472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003476:	e112      	b.n	800369e <UART_SetConfig+0x2e6>
 8003478:	2304      	movs	r3, #4
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347e:	e10e      	b.n	800369e <UART_SetConfig+0x2e6>
 8003480:	2308      	movs	r3, #8
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003486:	e10a      	b.n	800369e <UART_SetConfig+0x2e6>
 8003488:	2310      	movs	r3, #16
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348e:	e106      	b.n	800369e <UART_SetConfig+0x2e6>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7c      	ldr	r2, [pc, #496]	@ (8003688 <UART_SetConfig+0x2d0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d138      	bne.n	800350c <UART_SetConfig+0x154>
 800349a:	4b7a      	ldr	r3, [pc, #488]	@ (8003684 <UART_SetConfig+0x2cc>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d82d      	bhi.n	8003504 <UART_SetConfig+0x14c>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <UART_SetConfig+0xf8>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	08003505 	.word	0x08003505
 80034b8:	08003505 	.word	0x08003505
 80034bc:	08003505 	.word	0x08003505
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	08003505 	.word	0x08003505
 80034c8:	08003505 	.word	0x08003505
 80034cc:	08003505 	.word	0x08003505
 80034d0:	080034ed 	.word	0x080034ed
 80034d4:	08003505 	.word	0x08003505
 80034d8:	08003505 	.word	0x08003505
 80034dc:	08003505 	.word	0x08003505
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ea:	e0d8      	b.n	800369e <UART_SetConfig+0x2e6>
 80034ec:	2302      	movs	r3, #2
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f2:	e0d4      	b.n	800369e <UART_SetConfig+0x2e6>
 80034f4:	2304      	movs	r3, #4
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fa:	e0d0      	b.n	800369e <UART_SetConfig+0x2e6>
 80034fc:	2308      	movs	r3, #8
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003502:	e0cc      	b.n	800369e <UART_SetConfig+0x2e6>
 8003504:	2310      	movs	r3, #16
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350a:	e0c8      	b.n	800369e <UART_SetConfig+0x2e6>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5e      	ldr	r2, [pc, #376]	@ (800368c <UART_SetConfig+0x2d4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x1aa>
 8003516:	4b5b      	ldr	r3, [pc, #364]	@ (8003684 <UART_SetConfig+0x2cc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003520:	2b30      	cmp	r3, #48	@ 0x30
 8003522:	d016      	beq.n	8003552 <UART_SetConfig+0x19a>
 8003524:	2b30      	cmp	r3, #48	@ 0x30
 8003526:	d818      	bhi.n	800355a <UART_SetConfig+0x1a2>
 8003528:	2b20      	cmp	r3, #32
 800352a:	d00a      	beq.n	8003542 <UART_SetConfig+0x18a>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d814      	bhi.n	800355a <UART_SetConfig+0x1a2>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <UART_SetConfig+0x182>
 8003534:	2b10      	cmp	r3, #16
 8003536:	d008      	beq.n	800354a <UART_SetConfig+0x192>
 8003538:	e00f      	b.n	800355a <UART_SetConfig+0x1a2>
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003540:	e0ad      	b.n	800369e <UART_SetConfig+0x2e6>
 8003542:	2302      	movs	r3, #2
 8003544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003548:	e0a9      	b.n	800369e <UART_SetConfig+0x2e6>
 800354a:	2304      	movs	r3, #4
 800354c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003550:	e0a5      	b.n	800369e <UART_SetConfig+0x2e6>
 8003552:	2308      	movs	r3, #8
 8003554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003558:	e0a1      	b.n	800369e <UART_SetConfig+0x2e6>
 800355a:	2310      	movs	r3, #16
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003560:	e09d      	b.n	800369e <UART_SetConfig+0x2e6>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4a      	ldr	r2, [pc, #296]	@ (8003690 <UART_SetConfig+0x2d8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d125      	bne.n	80035b8 <UART_SetConfig+0x200>
 800356c:	4b45      	ldr	r3, [pc, #276]	@ (8003684 <UART_SetConfig+0x2cc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003572:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003576:	2bc0      	cmp	r3, #192	@ 0xc0
 8003578:	d016      	beq.n	80035a8 <UART_SetConfig+0x1f0>
 800357a:	2bc0      	cmp	r3, #192	@ 0xc0
 800357c:	d818      	bhi.n	80035b0 <UART_SetConfig+0x1f8>
 800357e:	2b80      	cmp	r3, #128	@ 0x80
 8003580:	d00a      	beq.n	8003598 <UART_SetConfig+0x1e0>
 8003582:	2b80      	cmp	r3, #128	@ 0x80
 8003584:	d814      	bhi.n	80035b0 <UART_SetConfig+0x1f8>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <UART_SetConfig+0x1d8>
 800358a:	2b40      	cmp	r3, #64	@ 0x40
 800358c:	d008      	beq.n	80035a0 <UART_SetConfig+0x1e8>
 800358e:	e00f      	b.n	80035b0 <UART_SetConfig+0x1f8>
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e082      	b.n	800369e <UART_SetConfig+0x2e6>
 8003598:	2302      	movs	r3, #2
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e07e      	b.n	800369e <UART_SetConfig+0x2e6>
 80035a0:	2304      	movs	r3, #4
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e07a      	b.n	800369e <UART_SetConfig+0x2e6>
 80035a8:	2308      	movs	r3, #8
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e076      	b.n	800369e <UART_SetConfig+0x2e6>
 80035b0:	2310      	movs	r3, #16
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e072      	b.n	800369e <UART_SetConfig+0x2e6>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a35      	ldr	r2, [pc, #212]	@ (8003694 <UART_SetConfig+0x2dc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d12a      	bne.n	8003618 <UART_SetConfig+0x260>
 80035c2:	4b30      	ldr	r3, [pc, #192]	@ (8003684 <UART_SetConfig+0x2cc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d0:	d01a      	beq.n	8003608 <UART_SetConfig+0x250>
 80035d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035d6:	d81b      	bhi.n	8003610 <UART_SetConfig+0x258>
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035dc:	d00c      	beq.n	80035f8 <UART_SetConfig+0x240>
 80035de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e2:	d815      	bhi.n	8003610 <UART_SetConfig+0x258>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <UART_SetConfig+0x238>
 80035e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ec:	d008      	beq.n	8003600 <UART_SetConfig+0x248>
 80035ee:	e00f      	b.n	8003610 <UART_SetConfig+0x258>
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e052      	b.n	800369e <UART_SetConfig+0x2e6>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fe:	e04e      	b.n	800369e <UART_SetConfig+0x2e6>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e04a      	b.n	800369e <UART_SetConfig+0x2e6>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e046      	b.n	800369e <UART_SetConfig+0x2e6>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003616:	e042      	b.n	800369e <UART_SetConfig+0x2e6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a17      	ldr	r2, [pc, #92]	@ (800367c <UART_SetConfig+0x2c4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d13a      	bne.n	8003698 <UART_SetConfig+0x2e0>
 8003622:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <UART_SetConfig+0x2cc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800362c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003630:	d01a      	beq.n	8003668 <UART_SetConfig+0x2b0>
 8003632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003636:	d81b      	bhi.n	8003670 <UART_SetConfig+0x2b8>
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800363c:	d00c      	beq.n	8003658 <UART_SetConfig+0x2a0>
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003642:	d815      	bhi.n	8003670 <UART_SetConfig+0x2b8>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <UART_SetConfig+0x298>
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364c:	d008      	beq.n	8003660 <UART_SetConfig+0x2a8>
 800364e:	e00f      	b.n	8003670 <UART_SetConfig+0x2b8>
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003656:	e022      	b.n	800369e <UART_SetConfig+0x2e6>
 8003658:	2302      	movs	r3, #2
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365e:	e01e      	b.n	800369e <UART_SetConfig+0x2e6>
 8003660:	2304      	movs	r3, #4
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e01a      	b.n	800369e <UART_SetConfig+0x2e6>
 8003668:	2308      	movs	r3, #8
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e016      	b.n	800369e <UART_SetConfig+0x2e6>
 8003670:	2310      	movs	r3, #16
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e012      	b.n	800369e <UART_SetConfig+0x2e6>
 8003678:	efff69f3 	.word	0xefff69f3
 800367c:	40008000 	.word	0x40008000
 8003680:	40013800 	.word	0x40013800
 8003684:	40021000 	.word	0x40021000
 8003688:	40004400 	.word	0x40004400
 800368c:	40004800 	.word	0x40004800
 8003690:	40004c00 	.word	0x40004c00
 8003694:	40005000 	.word	0x40005000
 8003698:	2310      	movs	r3, #16
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a9f      	ldr	r2, [pc, #636]	@ (8003920 <UART_SetConfig+0x568>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d17a      	bne.n	800379e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d824      	bhi.n	80036fa <UART_SetConfig+0x342>
 80036b0:	a201      	add	r2, pc, #4	@ (adr r2, 80036b8 <UART_SetConfig+0x300>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036fb 	.word	0x080036fb
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036fb 	.word	0x080036fb
 80036c8:	080036eb 	.word	0x080036eb
 80036cc:	080036fb 	.word	0x080036fb
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	080036fb 	.word	0x080036fb
 80036d8:	080036f3 	.word	0x080036f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7ff f83c 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80036e0:	61f8      	str	r0, [r7, #28]
        break;
 80036e2:	e010      	b.n	8003706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b8f      	ldr	r3, [pc, #572]	@ (8003924 <UART_SetConfig+0x56c>)
 80036e6:	61fb      	str	r3, [r7, #28]
        break;
 80036e8:	e00d      	b.n	8003706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe ff9d 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80036ee:	61f8      	str	r0, [r7, #28]
        break;
 80036f0:	e009      	b.n	8003706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f6:	61fb      	str	r3, [r7, #28]
        break;
 80036f8:	e005      	b.n	8003706 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80fb 	beq.w	8003904 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	429a      	cmp	r2, r3
 800371c:	d305      	bcc.n	800372a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	429a      	cmp	r2, r3
 8003728:	d903      	bls.n	8003732 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003730:	e0e8      	b.n	8003904 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2200      	movs	r2, #0
 8003736:	461c      	mov	r4, r3
 8003738:	4615      	mov	r5, r2
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	022b      	lsls	r3, r5, #8
 8003744:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003748:	0222      	lsls	r2, r4, #8
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	6849      	ldr	r1, [r1, #4]
 800374e:	0849      	lsrs	r1, r1, #1
 8003750:	2000      	movs	r0, #0
 8003752:	4688      	mov	r8, r1
 8003754:	4681      	mov	r9, r0
 8003756:	eb12 0a08 	adds.w	sl, r2, r8
 800375a:	eb43 0b09 	adc.w	fp, r3, r9
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376c:	4650      	mov	r0, sl
 800376e:	4659      	mov	r1, fp
 8003770:	f7fc fd7e 	bl	8000270 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003782:	d308      	bcc.n	8003796 <UART_SetConfig+0x3de>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378a:	d204      	bcs.n	8003796 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	e0b6      	b.n	8003904 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800379c:	e0b2      	b.n	8003904 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a6:	d15e      	bne.n	8003866 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d828      	bhi.n	8003802 <UART_SetConfig+0x44a>
 80037b0:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <UART_SetConfig+0x400>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037e5 	.word	0x080037e5
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	08003803 	.word	0x08003803
 80037c8:	080037f3 	.word	0x080037f3
 80037cc:	08003803 	.word	0x08003803
 80037d0:	08003803 	.word	0x08003803
 80037d4:	08003803 	.word	0x08003803
 80037d8:	080037fb 	.word	0x080037fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe ffbc 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80037e0:	61f8      	str	r0, [r7, #28]
        break;
 80037e2:	e014      	b.n	800380e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e4:	f7fe ffce 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 80037e8:	61f8      	str	r0, [r7, #28]
        break;
 80037ea:	e010      	b.n	800380e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003924 <UART_SetConfig+0x56c>)
 80037ee:	61fb      	str	r3, [r7, #28]
        break;
 80037f0:	e00d      	b.n	800380e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f2:	f7fe ff19 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80037f6:	61f8      	str	r0, [r7, #28]
        break;
 80037f8:	e009      	b.n	800380e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037fe:	61fb      	str	r3, [r7, #28]
        break;
 8003800:	e005      	b.n	800380e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800380c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d077      	beq.n	8003904 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005a      	lsls	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	441a      	add	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b0f      	cmp	r3, #15
 800382e:	d916      	bls.n	800385e <UART_SetConfig+0x4a6>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003836:	d212      	bcs.n	800385e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f023 030f 	bic.w	r3, r3, #15
 8003840:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	b29b      	uxth	r3, r3
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	b29a      	uxth	r2, r3
 800384e:	8afb      	ldrh	r3, [r7, #22]
 8003850:	4313      	orrs	r3, r2
 8003852:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	8afa      	ldrh	r2, [r7, #22]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e052      	b.n	8003904 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003864:	e04e      	b.n	8003904 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003866:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800386a:	2b08      	cmp	r3, #8
 800386c:	d827      	bhi.n	80038be <UART_SetConfig+0x506>
 800386e:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <UART_SetConfig+0x4bc>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003899 	.word	0x08003899
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038a9 	.word	0x080038a9
 8003880:	080038bf 	.word	0x080038bf
 8003884:	080038af 	.word	0x080038af
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038bf 	.word	0x080038bf
 8003894:	080038b7 	.word	0x080038b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7fe ff5e 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 800389c:	61f8      	str	r0, [r7, #28]
        break;
 800389e:	e014      	b.n	80038ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a0:	f7fe ff70 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 80038a4:	61f8      	str	r0, [r7, #28]
        break;
 80038a6:	e010      	b.n	80038ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003924 <UART_SetConfig+0x56c>)
 80038aa:	61fb      	str	r3, [r7, #28]
        break;
 80038ac:	e00d      	b.n	80038ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ae:	f7fe febb 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80038b2:	61f8      	str	r0, [r7, #28]
        break;
 80038b4:	e009      	b.n	80038ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ba:	61fb      	str	r3, [r7, #28]
        break;
 80038bc:	e005      	b.n	80038ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038c8:	bf00      	nop
    }

    if (pclk != 0U)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d019      	beq.n	8003904 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	085a      	lsrs	r2, r3, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	441a      	add	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b0f      	cmp	r3, #15
 80038e8:	d909      	bls.n	80038fe <UART_SetConfig+0x546>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f0:	d205      	bcs.n	80038fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	e002      	b.n	8003904 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003910:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391e:	bf00      	nop
 8003920:	40008000 	.word	0x40008000
 8003924:	00f42400 	.word	0x00f42400

08003928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a26:	d10a      	bne.n	8003a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b098      	sub	sp, #96	@ 0x60
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a7c:	f7fd f92c 	bl	8000cd8 <HAL_GetTick>
 8003a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d12e      	bne.n	8003aee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f88c 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d021      	beq.n	8003aee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e6      	bne.n	8003aaa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e062      	b.n	8003bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d149      	bne.n	8003b90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f856 	bl	8003bbc <UART_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03c      	beq.n	8003b90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	623b      	str	r3, [r7, #32]
   return(result);
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	617b      	str	r3, [r7, #20]
   return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e011      	b.n	8003bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3758      	adds	r7, #88	@ 0x58
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bcc:	e04f      	b.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d04b      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fd f87f 	bl	8000cd8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <UART_WaitOnFlagUntilTimeout+0x30>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e04e      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d037      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b80      	cmp	r3, #128	@ 0x80
 8003c02:	d034      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b40      	cmp	r3, #64	@ 0x40
 8003c08:	d031      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d110      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f838 	bl	8003c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e029      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c48:	d111      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f81e 	bl	8003c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e00f      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d0a0      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b095      	sub	sp, #84	@ 0x54
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d118      	bne.n	8003d3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f023 0310 	bic.w	r3, r3, #16
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	613b      	str	r3, [r7, #16]
   return(result);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e6      	bne.n	8003d0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d52:	bf00      	nop
 8003d54:	3754      	adds	r7, #84	@ 0x54
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <std>:
 8003d60:	2300      	movs	r3, #0
 8003d62:	b510      	push	{r4, lr}
 8003d64:	4604      	mov	r4, r0
 8003d66:	e9c0 3300 	strd	r3, r3, [r0]
 8003d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d6e:	6083      	str	r3, [r0, #8]
 8003d70:	8181      	strh	r1, [r0, #12]
 8003d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d74:	81c2      	strh	r2, [r0, #14]
 8003d76:	6183      	str	r3, [r0, #24]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	305c      	adds	r0, #92	@ 0x5c
 8003d7e:	f000 f9f9 	bl	8004174 <memset>
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <std+0x58>)
 8003d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <std+0x5c>)
 8003d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <std+0x60>)
 8003d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <std+0x64>)
 8003d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <std+0x68>)
 8003d94:	6224      	str	r4, [r4, #32]
 8003d96:	429c      	cmp	r4, r3
 8003d98:	d006      	beq.n	8003da8 <std+0x48>
 8003d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d9e:	4294      	cmp	r4, r2
 8003da0:	d002      	beq.n	8003da8 <std+0x48>
 8003da2:	33d0      	adds	r3, #208	@ 0xd0
 8003da4:	429c      	cmp	r4, r3
 8003da6:	d105      	bne.n	8003db4 <std+0x54>
 8003da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db0:	f000 ba58 	b.w	8004264 <__retarget_lock_init_recursive>
 8003db4:	bd10      	pop	{r4, pc}
 8003db6:	bf00      	nop
 8003db8:	08003fc5 	.word	0x08003fc5
 8003dbc:	08003fe7 	.word	0x08003fe7
 8003dc0:	0800401f 	.word	0x0800401f
 8003dc4:	08004043 	.word	0x08004043
 8003dc8:	20000168 	.word	0x20000168

08003dcc <stdio_exit_handler>:
 8003dcc:	4a02      	ldr	r2, [pc, #8]	@ (8003dd8 <stdio_exit_handler+0xc>)
 8003dce:	4903      	ldr	r1, [pc, #12]	@ (8003ddc <stdio_exit_handler+0x10>)
 8003dd0:	4803      	ldr	r0, [pc, #12]	@ (8003de0 <stdio_exit_handler+0x14>)
 8003dd2:	f000 b869 	b.w	8003ea8 <_fwalk_sglue>
 8003dd6:	bf00      	nop
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	08004b05 	.word	0x08004b05
 8003de0:	2000001c 	.word	0x2000001c

08003de4 <cleanup_stdio>:
 8003de4:	6841      	ldr	r1, [r0, #4]
 8003de6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <cleanup_stdio+0x34>)
 8003de8:	4299      	cmp	r1, r3
 8003dea:	b510      	push	{r4, lr}
 8003dec:	4604      	mov	r4, r0
 8003dee:	d001      	beq.n	8003df4 <cleanup_stdio+0x10>
 8003df0:	f000 fe88 	bl	8004b04 <_fflush_r>
 8003df4:	68a1      	ldr	r1, [r4, #8]
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <cleanup_stdio+0x38>)
 8003df8:	4299      	cmp	r1, r3
 8003dfa:	d002      	beq.n	8003e02 <cleanup_stdio+0x1e>
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 fe81 	bl	8004b04 <_fflush_r>
 8003e02:	68e1      	ldr	r1, [r4, #12]
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <cleanup_stdio+0x3c>)
 8003e06:	4299      	cmp	r1, r3
 8003e08:	d004      	beq.n	8003e14 <cleanup_stdio+0x30>
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e10:	f000 be78 	b.w	8004b04 <_fflush_r>
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	bf00      	nop
 8003e18:	20000168 	.word	0x20000168
 8003e1c:	200001d0 	.word	0x200001d0
 8003e20:	20000238 	.word	0x20000238

08003e24 <global_stdio_init.part.0>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <global_stdio_init.part.0+0x30>)
 8003e28:	4c0b      	ldr	r4, [pc, #44]	@ (8003e58 <global_stdio_init.part.0+0x34>)
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e5c <global_stdio_init.part.0+0x38>)
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	2200      	movs	r2, #0
 8003e32:	2104      	movs	r1, #4
 8003e34:	f7ff ff94 	bl	8003d60 <std>
 8003e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	2109      	movs	r1, #9
 8003e40:	f7ff ff8e 	bl	8003d60 <std>
 8003e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e48:	2202      	movs	r2, #2
 8003e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e4e:	2112      	movs	r1, #18
 8003e50:	f7ff bf86 	b.w	8003d60 <std>
 8003e54:	200002a0 	.word	0x200002a0
 8003e58:	20000168 	.word	0x20000168
 8003e5c:	08003dcd 	.word	0x08003dcd

08003e60 <__sfp_lock_acquire>:
 8003e60:	4801      	ldr	r0, [pc, #4]	@ (8003e68 <__sfp_lock_acquire+0x8>)
 8003e62:	f000 ba00 	b.w	8004266 <__retarget_lock_acquire_recursive>
 8003e66:	bf00      	nop
 8003e68:	200002a9 	.word	0x200002a9

08003e6c <__sfp_lock_release>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	@ (8003e74 <__sfp_lock_release+0x8>)
 8003e6e:	f000 b9fb 	b.w	8004268 <__retarget_lock_release_recursive>
 8003e72:	bf00      	nop
 8003e74:	200002a9 	.word	0x200002a9

08003e78 <__sinit>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	f7ff fff0 	bl	8003e60 <__sfp_lock_acquire>
 8003e80:	6a23      	ldr	r3, [r4, #32]
 8003e82:	b11b      	cbz	r3, 8003e8c <__sinit+0x14>
 8003e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e88:	f7ff bff0 	b.w	8003e6c <__sfp_lock_release>
 8003e8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ea0 <__sinit+0x28>)
 8003e8e:	6223      	str	r3, [r4, #32]
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <__sinit+0x2c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f5      	bne.n	8003e84 <__sinit+0xc>
 8003e98:	f7ff ffc4 	bl	8003e24 <global_stdio_init.part.0>
 8003e9c:	e7f2      	b.n	8003e84 <__sinit+0xc>
 8003e9e:	bf00      	nop
 8003ea0:	08003de5 	.word	0x08003de5
 8003ea4:	200002a0 	.word	0x200002a0

08003ea8 <_fwalk_sglue>:
 8003ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eac:	4607      	mov	r7, r0
 8003eae:	4688      	mov	r8, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8003ebc:	d505      	bpl.n	8003eca <_fwalk_sglue+0x22>
 8003ebe:	6824      	ldr	r4, [r4, #0]
 8003ec0:	2c00      	cmp	r4, #0
 8003ec2:	d1f7      	bne.n	8003eb4 <_fwalk_sglue+0xc>
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eca:	89ab      	ldrh	r3, [r5, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d907      	bls.n	8003ee0 <_fwalk_sglue+0x38>
 8003ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <_fwalk_sglue+0x38>
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4638      	mov	r0, r7
 8003edc:	47c0      	blx	r8
 8003ede:	4306      	orrs	r6, r0
 8003ee0:	3568      	adds	r5, #104	@ 0x68
 8003ee2:	e7e9      	b.n	8003eb8 <_fwalk_sglue+0x10>

08003ee4 <iprintf>:
 8003ee4:	b40f      	push	{r0, r1, r2, r3}
 8003ee6:	b507      	push	{r0, r1, r2, lr}
 8003ee8:	4906      	ldr	r1, [pc, #24]	@ (8003f04 <iprintf+0x20>)
 8003eea:	ab04      	add	r3, sp, #16
 8003eec:	6808      	ldr	r0, [r1, #0]
 8003eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef2:	6881      	ldr	r1, [r0, #8]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	f000 fadb 	bl	80044b0 <_vfiprintf_r>
 8003efa:	b003      	add	sp, #12
 8003efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f00:	b004      	add	sp, #16
 8003f02:	4770      	bx	lr
 8003f04:	20000018 	.word	0x20000018

08003f08 <_puts_r>:
 8003f08:	6a03      	ldr	r3, [r0, #32]
 8003f0a:	b570      	push	{r4, r5, r6, lr}
 8003f0c:	6884      	ldr	r4, [r0, #8]
 8003f0e:	4605      	mov	r5, r0
 8003f10:	460e      	mov	r6, r1
 8003f12:	b90b      	cbnz	r3, 8003f18 <_puts_r+0x10>
 8003f14:	f7ff ffb0 	bl	8003e78 <__sinit>
 8003f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1a:	07db      	lsls	r3, r3, #31
 8003f1c:	d405      	bmi.n	8003f2a <_puts_r+0x22>
 8003f1e:	89a3      	ldrh	r3, [r4, #12]
 8003f20:	0598      	lsls	r0, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <_puts_r+0x22>
 8003f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f26:	f000 f99e 	bl	8004266 <__retarget_lock_acquire_recursive>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	0719      	lsls	r1, r3, #28
 8003f2e:	d502      	bpl.n	8003f36 <_puts_r+0x2e>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d135      	bne.n	8003fa2 <_puts_r+0x9a>
 8003f36:	4621      	mov	r1, r4
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f000 f8c5 	bl	80040c8 <__swsetup_r>
 8003f3e:	b380      	cbz	r0, 8003fa2 <_puts_r+0x9a>
 8003f40:	f04f 35ff 	mov.w	r5, #4294967295
 8003f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f46:	07da      	lsls	r2, r3, #31
 8003f48:	d405      	bmi.n	8003f56 <_puts_r+0x4e>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	059b      	lsls	r3, r3, #22
 8003f4e:	d402      	bmi.n	8003f56 <_puts_r+0x4e>
 8003f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f52:	f000 f989 	bl	8004268 <__retarget_lock_release_recursive>
 8003f56:	4628      	mov	r0, r5
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da04      	bge.n	8003f68 <_puts_r+0x60>
 8003f5e:	69a2      	ldr	r2, [r4, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	dc17      	bgt.n	8003f94 <_puts_r+0x8c>
 8003f64:	290a      	cmp	r1, #10
 8003f66:	d015      	beq.n	8003f94 <_puts_r+0x8c>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	6022      	str	r2, [r4, #0]
 8003f6e:	7019      	strb	r1, [r3, #0]
 8003f70:	68a3      	ldr	r3, [r4, #8]
 8003f72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f76:	3b01      	subs	r3, #1
 8003f78:	60a3      	str	r3, [r4, #8]
 8003f7a:	2900      	cmp	r1, #0
 8003f7c:	d1ed      	bne.n	8003f5a <_puts_r+0x52>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da11      	bge.n	8003fa6 <_puts_r+0x9e>
 8003f82:	4622      	mov	r2, r4
 8003f84:	210a      	movs	r1, #10
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 f85f 	bl	800404a <__swbuf_r>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d0d7      	beq.n	8003f40 <_puts_r+0x38>
 8003f90:	250a      	movs	r5, #10
 8003f92:	e7d7      	b.n	8003f44 <_puts_r+0x3c>
 8003f94:	4622      	mov	r2, r4
 8003f96:	4628      	mov	r0, r5
 8003f98:	f000 f857 	bl	800404a <__swbuf_r>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d1e7      	bne.n	8003f70 <_puts_r+0x68>
 8003fa0:	e7ce      	b.n	8003f40 <_puts_r+0x38>
 8003fa2:	3e01      	subs	r6, #1
 8003fa4:	e7e4      	b.n	8003f70 <_puts_r+0x68>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	6022      	str	r2, [r4, #0]
 8003fac:	220a      	movs	r2, #10
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e7ee      	b.n	8003f90 <_puts_r+0x88>
	...

08003fb4 <puts>:
 8003fb4:	4b02      	ldr	r3, [pc, #8]	@ (8003fc0 <puts+0xc>)
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f7ff bfa5 	b.w	8003f08 <_puts_r>
 8003fbe:	bf00      	nop
 8003fc0:	20000018 	.word	0x20000018

08003fc4 <__sread>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fcc:	f000 f8fc 	bl	80041c8 <_read_r>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	bfab      	itete	ge
 8003fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fd8:	181b      	addge	r3, r3, r0
 8003fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fde:	bfac      	ite	ge
 8003fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fe2:	81a3      	strhlt	r3, [r4, #12]
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <__swrite>:
 8003fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	461f      	mov	r7, r3
 8003fec:	898b      	ldrh	r3, [r1, #12]
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	d505      	bpl.n	8004004 <__swrite+0x1e>
 8003ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f8d0 	bl	80041a4 <_lseek_r>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	4632      	mov	r2, r6
 8004012:	463b      	mov	r3, r7
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	f000 b8e7 	b.w	80041ec <_write_r>

0800401e <__sseek>:
 800401e:	b510      	push	{r4, lr}
 8004020:	460c      	mov	r4, r1
 8004022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004026:	f000 f8bd 	bl	80041a4 <_lseek_r>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	bf15      	itete	ne
 8004030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800403a:	81a3      	strheq	r3, [r4, #12]
 800403c:	bf18      	it	ne
 800403e:	81a3      	strhne	r3, [r4, #12]
 8004040:	bd10      	pop	{r4, pc}

08004042 <__sclose>:
 8004042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004046:	f000 b89d 	b.w	8004184 <_close_r>

0800404a <__swbuf_r>:
 800404a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404c:	460e      	mov	r6, r1
 800404e:	4614      	mov	r4, r2
 8004050:	4605      	mov	r5, r0
 8004052:	b118      	cbz	r0, 800405c <__swbuf_r+0x12>
 8004054:	6a03      	ldr	r3, [r0, #32]
 8004056:	b90b      	cbnz	r3, 800405c <__swbuf_r+0x12>
 8004058:	f7ff ff0e 	bl	8003e78 <__sinit>
 800405c:	69a3      	ldr	r3, [r4, #24]
 800405e:	60a3      	str	r3, [r4, #8]
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	071a      	lsls	r2, r3, #28
 8004064:	d501      	bpl.n	800406a <__swbuf_r+0x20>
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	b943      	cbnz	r3, 800407c <__swbuf_r+0x32>
 800406a:	4621      	mov	r1, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f82b 	bl	80040c8 <__swsetup_r>
 8004072:	b118      	cbz	r0, 800407c <__swbuf_r+0x32>
 8004074:	f04f 37ff 	mov.w	r7, #4294967295
 8004078:	4638      	mov	r0, r7
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	6922      	ldr	r2, [r4, #16]
 8004080:	1a98      	subs	r0, r3, r2
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	b2f6      	uxtb	r6, r6
 8004086:	4283      	cmp	r3, r0
 8004088:	4637      	mov	r7, r6
 800408a:	dc05      	bgt.n	8004098 <__swbuf_r+0x4e>
 800408c:	4621      	mov	r1, r4
 800408e:	4628      	mov	r0, r5
 8004090:	f000 fd38 	bl	8004b04 <_fflush_r>
 8004094:	2800      	cmp	r0, #0
 8004096:	d1ed      	bne.n	8004074 <__swbuf_r+0x2a>
 8004098:	68a3      	ldr	r3, [r4, #8]
 800409a:	3b01      	subs	r3, #1
 800409c:	60a3      	str	r3, [r4, #8]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	6022      	str	r2, [r4, #0]
 80040a4:	701e      	strb	r6, [r3, #0]
 80040a6:	6962      	ldr	r2, [r4, #20]
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d004      	beq.n	80040b8 <__swbuf_r+0x6e>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	07db      	lsls	r3, r3, #31
 80040b2:	d5e1      	bpl.n	8004078 <__swbuf_r+0x2e>
 80040b4:	2e0a      	cmp	r6, #10
 80040b6:	d1df      	bne.n	8004078 <__swbuf_r+0x2e>
 80040b8:	4621      	mov	r1, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 fd22 	bl	8004b04 <_fflush_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d0d9      	beq.n	8004078 <__swbuf_r+0x2e>
 80040c4:	e7d6      	b.n	8004074 <__swbuf_r+0x2a>
	...

080040c8 <__swsetup_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4b29      	ldr	r3, [pc, #164]	@ (8004170 <__swsetup_r+0xa8>)
 80040cc:	4605      	mov	r5, r0
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	460c      	mov	r4, r1
 80040d2:	b118      	cbz	r0, 80040dc <__swsetup_r+0x14>
 80040d4:	6a03      	ldr	r3, [r0, #32]
 80040d6:	b90b      	cbnz	r3, 80040dc <__swsetup_r+0x14>
 80040d8:	f7ff fece 	bl	8003e78 <__sinit>
 80040dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e0:	0719      	lsls	r1, r3, #28
 80040e2:	d422      	bmi.n	800412a <__swsetup_r+0x62>
 80040e4:	06da      	lsls	r2, r3, #27
 80040e6:	d407      	bmi.n	80040f8 <__swsetup_r+0x30>
 80040e8:	2209      	movs	r2, #9
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	e033      	b.n	8004160 <__swsetup_r+0x98>
 80040f8:	0758      	lsls	r0, r3, #29
 80040fa:	d512      	bpl.n	8004122 <__swsetup_r+0x5a>
 80040fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040fe:	b141      	cbz	r1, 8004112 <__swsetup_r+0x4a>
 8004100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004104:	4299      	cmp	r1, r3
 8004106:	d002      	beq.n	800410e <__swsetup_r+0x46>
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f8af 	bl	800426c <_free_r>
 800410e:	2300      	movs	r3, #0
 8004110:	6363      	str	r3, [r4, #52]	@ 0x34
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	2300      	movs	r3, #0
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f043 0308 	orr.w	r3, r3, #8
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	b94b      	cbnz	r3, 8004142 <__swsetup_r+0x7a>
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004138:	d003      	beq.n	8004142 <__swsetup_r+0x7a>
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fd2f 	bl	8004ba0 <__smakebuf_r>
 8004142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004146:	f013 0201 	ands.w	r2, r3, #1
 800414a:	d00a      	beq.n	8004162 <__swsetup_r+0x9a>
 800414c:	2200      	movs	r2, #0
 800414e:	60a2      	str	r2, [r4, #8]
 8004150:	6962      	ldr	r2, [r4, #20]
 8004152:	4252      	negs	r2, r2
 8004154:	61a2      	str	r2, [r4, #24]
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	b942      	cbnz	r2, 800416c <__swsetup_r+0xa4>
 800415a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800415e:	d1c5      	bne.n	80040ec <__swsetup_r+0x24>
 8004160:	bd38      	pop	{r3, r4, r5, pc}
 8004162:	0799      	lsls	r1, r3, #30
 8004164:	bf58      	it	pl
 8004166:	6962      	ldrpl	r2, [r4, #20]
 8004168:	60a2      	str	r2, [r4, #8]
 800416a:	e7f4      	b.n	8004156 <__swsetup_r+0x8e>
 800416c:	2000      	movs	r0, #0
 800416e:	e7f7      	b.n	8004160 <__swsetup_r+0x98>
 8004170:	20000018 	.word	0x20000018

08004174 <memset>:
 8004174:	4402      	add	r2, r0
 8004176:	4603      	mov	r3, r0
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	f803 1b01 	strb.w	r1, [r3], #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <_close_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d06      	ldr	r5, [pc, #24]	@ (80041a0 <_close_r+0x1c>)
 8004188:	2300      	movs	r3, #0
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7fc fc08 	bl	80009a4 <_close>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_close_r+0x1a>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_close_r+0x1a>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200002a4 	.word	0x200002a4

080041a4 <_lseek_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4d07      	ldr	r5, [pc, #28]	@ (80041c4 <_lseek_r+0x20>)
 80041a8:	4604      	mov	r4, r0
 80041aa:	4608      	mov	r0, r1
 80041ac:	4611      	mov	r1, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7fc fc1d 	bl	80009f2 <_lseek>
 80041b8:	1c43      	adds	r3, r0, #1
 80041ba:	d102      	bne.n	80041c2 <_lseek_r+0x1e>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	b103      	cbz	r3, 80041c2 <_lseek_r+0x1e>
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
 80041c4:	200002a4 	.word	0x200002a4

080041c8 <_read_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	@ (80041e8 <_read_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fc fbab 	bl	8000932 <_read>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_read_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_read_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200002a4 	.word	0x200002a4

080041ec <_write_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	@ (800420c <_write_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fc fbb6 	bl	800096c <_write>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_write_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_write_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200002a4 	.word	0x200002a4

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	@ (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000018 	.word	0x20000018

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4d0d      	ldr	r5, [pc, #52]	@ (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	@ (8004258 <__libc_init_array+0x3c>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2600      	movs	r6, #0
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4d0b      	ldr	r5, [pc, #44]	@ (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	@ (8004260 <__libc_init_array+0x44>)
 8004230:	f000 fd24 	bl	8004c7c <_init>
 8004234:	1b64      	subs	r4, r4, r5
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2600      	movs	r6, #0
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08004d48 	.word	0x08004d48
 8004258:	08004d48 	.word	0x08004d48
 800425c:	08004d48 	.word	0x08004d48
 8004260:	08004d4c 	.word	0x08004d4c

08004264 <__retarget_lock_init_recursive>:
 8004264:	4770      	bx	lr

08004266 <__retarget_lock_acquire_recursive>:
 8004266:	4770      	bx	lr

08004268 <__retarget_lock_release_recursive>:
 8004268:	4770      	bx	lr
	...

0800426c <_free_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4605      	mov	r5, r0
 8004270:	2900      	cmp	r1, #0
 8004272:	d041      	beq.n	80042f8 <_free_r+0x8c>
 8004274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004278:	1f0c      	subs	r4, r1, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfb8      	it	lt
 800427e:	18e4      	addlt	r4, r4, r3
 8004280:	f000 f8e0 	bl	8004444 <__malloc_lock>
 8004284:	4a1d      	ldr	r2, [pc, #116]	@ (80042fc <_free_r+0x90>)
 8004286:	6813      	ldr	r3, [r2, #0]
 8004288:	b933      	cbnz	r3, 8004298 <_free_r+0x2c>
 800428a:	6063      	str	r3, [r4, #4]
 800428c:	6014      	str	r4, [r2, #0]
 800428e:	4628      	mov	r0, r5
 8004290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004294:	f000 b8dc 	b.w	8004450 <__malloc_unlock>
 8004298:	42a3      	cmp	r3, r4
 800429a:	d908      	bls.n	80042ae <_free_r+0x42>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	1821      	adds	r1, r4, r0
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf01      	itttt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	1809      	addeq	r1, r1, r0
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	e7ed      	b.n	800428a <_free_r+0x1e>
 80042ae:	461a      	mov	r2, r3
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	b10b      	cbz	r3, 80042b8 <_free_r+0x4c>
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	d9fa      	bls.n	80042ae <_free_r+0x42>
 80042b8:	6811      	ldr	r1, [r2, #0]
 80042ba:	1850      	adds	r0, r2, r1
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d10b      	bne.n	80042d8 <_free_r+0x6c>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	4401      	add	r1, r0
 80042c4:	1850      	adds	r0, r2, r1
 80042c6:	4283      	cmp	r3, r0
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	d1e0      	bne.n	800428e <_free_r+0x22>
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	6053      	str	r3, [r2, #4]
 80042d2:	4408      	add	r0, r1
 80042d4:	6010      	str	r0, [r2, #0]
 80042d6:	e7da      	b.n	800428e <_free_r+0x22>
 80042d8:	d902      	bls.n	80042e0 <_free_r+0x74>
 80042da:	230c      	movs	r3, #12
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	e7d6      	b.n	800428e <_free_r+0x22>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	1821      	adds	r1, r4, r0
 80042e4:	428b      	cmp	r3, r1
 80042e6:	bf04      	itt	eq
 80042e8:	6819      	ldreq	r1, [r3, #0]
 80042ea:	685b      	ldreq	r3, [r3, #4]
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	bf04      	itt	eq
 80042f0:	1809      	addeq	r1, r1, r0
 80042f2:	6021      	streq	r1, [r4, #0]
 80042f4:	6054      	str	r4, [r2, #4]
 80042f6:	e7ca      	b.n	800428e <_free_r+0x22>
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	bf00      	nop
 80042fc:	200002b0 	.word	0x200002b0

08004300 <sbrk_aligned>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4e0f      	ldr	r6, [pc, #60]	@ (8004340 <sbrk_aligned+0x40>)
 8004304:	460c      	mov	r4, r1
 8004306:	6831      	ldr	r1, [r6, #0]
 8004308:	4605      	mov	r5, r0
 800430a:	b911      	cbnz	r1, 8004312 <sbrk_aligned+0x12>
 800430c:	f000 fca6 	bl	8004c5c <_sbrk_r>
 8004310:	6030      	str	r0, [r6, #0]
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	f000 fca1 	bl	8004c5c <_sbrk_r>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d103      	bne.n	8004326 <sbrk_aligned+0x26>
 800431e:	f04f 34ff 	mov.w	r4, #4294967295
 8004322:	4620      	mov	r0, r4
 8004324:	bd70      	pop	{r4, r5, r6, pc}
 8004326:	1cc4      	adds	r4, r0, #3
 8004328:	f024 0403 	bic.w	r4, r4, #3
 800432c:	42a0      	cmp	r0, r4
 800432e:	d0f8      	beq.n	8004322 <sbrk_aligned+0x22>
 8004330:	1a21      	subs	r1, r4, r0
 8004332:	4628      	mov	r0, r5
 8004334:	f000 fc92 	bl	8004c5c <_sbrk_r>
 8004338:	3001      	adds	r0, #1
 800433a:	d1f2      	bne.n	8004322 <sbrk_aligned+0x22>
 800433c:	e7ef      	b.n	800431e <sbrk_aligned+0x1e>
 800433e:	bf00      	nop
 8004340:	200002ac 	.word	0x200002ac

08004344 <_malloc_r>:
 8004344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004348:	1ccd      	adds	r5, r1, #3
 800434a:	f025 0503 	bic.w	r5, r5, #3
 800434e:	3508      	adds	r5, #8
 8004350:	2d0c      	cmp	r5, #12
 8004352:	bf38      	it	cc
 8004354:	250c      	movcc	r5, #12
 8004356:	2d00      	cmp	r5, #0
 8004358:	4606      	mov	r6, r0
 800435a:	db01      	blt.n	8004360 <_malloc_r+0x1c>
 800435c:	42a9      	cmp	r1, r5
 800435e:	d904      	bls.n	800436a <_malloc_r+0x26>
 8004360:	230c      	movs	r3, #12
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	2000      	movs	r0, #0
 8004366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800436a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004440 <_malloc_r+0xfc>
 800436e:	f000 f869 	bl	8004444 <__malloc_lock>
 8004372:	f8d8 3000 	ldr.w	r3, [r8]
 8004376:	461c      	mov	r4, r3
 8004378:	bb44      	cbnz	r4, 80043cc <_malloc_r+0x88>
 800437a:	4629      	mov	r1, r5
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff ffbf 	bl	8004300 <sbrk_aligned>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	4604      	mov	r4, r0
 8004386:	d158      	bne.n	800443a <_malloc_r+0xf6>
 8004388:	f8d8 4000 	ldr.w	r4, [r8]
 800438c:	4627      	mov	r7, r4
 800438e:	2f00      	cmp	r7, #0
 8004390:	d143      	bne.n	800441a <_malloc_r+0xd6>
 8004392:	2c00      	cmp	r4, #0
 8004394:	d04b      	beq.n	800442e <_malloc_r+0xea>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	4639      	mov	r1, r7
 800439a:	4630      	mov	r0, r6
 800439c:	eb04 0903 	add.w	r9, r4, r3
 80043a0:	f000 fc5c 	bl	8004c5c <_sbrk_r>
 80043a4:	4581      	cmp	r9, r0
 80043a6:	d142      	bne.n	800442e <_malloc_r+0xea>
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	1a6d      	subs	r5, r5, r1
 80043ac:	4629      	mov	r1, r5
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7ff ffa6 	bl	8004300 <sbrk_aligned>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d03a      	beq.n	800442e <_malloc_r+0xea>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	442b      	add	r3, r5
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	f8d8 3000 	ldr.w	r3, [r8]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	bb62      	cbnz	r2, 8004420 <_malloc_r+0xdc>
 80043c6:	f8c8 7000 	str.w	r7, [r8]
 80043ca:	e00f      	b.n	80043ec <_malloc_r+0xa8>
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	1b52      	subs	r2, r2, r5
 80043d0:	d420      	bmi.n	8004414 <_malloc_r+0xd0>
 80043d2:	2a0b      	cmp	r2, #11
 80043d4:	d917      	bls.n	8004406 <_malloc_r+0xc2>
 80043d6:	1961      	adds	r1, r4, r5
 80043d8:	42a3      	cmp	r3, r4
 80043da:	6025      	str	r5, [r4, #0]
 80043dc:	bf18      	it	ne
 80043de:	6059      	strne	r1, [r3, #4]
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	bf08      	it	eq
 80043e4:	f8c8 1000 	streq.w	r1, [r8]
 80043e8:	5162      	str	r2, [r4, r5]
 80043ea:	604b      	str	r3, [r1, #4]
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 f82f 	bl	8004450 <__malloc_unlock>
 80043f2:	f104 000b 	add.w	r0, r4, #11
 80043f6:	1d23      	adds	r3, r4, #4
 80043f8:	f020 0007 	bic.w	r0, r0, #7
 80043fc:	1ac2      	subs	r2, r0, r3
 80043fe:	bf1c      	itt	ne
 8004400:	1a1b      	subne	r3, r3, r0
 8004402:	50a3      	strne	r3, [r4, r2]
 8004404:	e7af      	b.n	8004366 <_malloc_r+0x22>
 8004406:	6862      	ldr	r2, [r4, #4]
 8004408:	42a3      	cmp	r3, r4
 800440a:	bf0c      	ite	eq
 800440c:	f8c8 2000 	streq.w	r2, [r8]
 8004410:	605a      	strne	r2, [r3, #4]
 8004412:	e7eb      	b.n	80043ec <_malloc_r+0xa8>
 8004414:	4623      	mov	r3, r4
 8004416:	6864      	ldr	r4, [r4, #4]
 8004418:	e7ae      	b.n	8004378 <_malloc_r+0x34>
 800441a:	463c      	mov	r4, r7
 800441c:	687f      	ldr	r7, [r7, #4]
 800441e:	e7b6      	b.n	800438e <_malloc_r+0x4a>
 8004420:	461a      	mov	r2, r3
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	42a3      	cmp	r3, r4
 8004426:	d1fb      	bne.n	8004420 <_malloc_r+0xdc>
 8004428:	2300      	movs	r3, #0
 800442a:	6053      	str	r3, [r2, #4]
 800442c:	e7de      	b.n	80043ec <_malloc_r+0xa8>
 800442e:	230c      	movs	r3, #12
 8004430:	6033      	str	r3, [r6, #0]
 8004432:	4630      	mov	r0, r6
 8004434:	f000 f80c 	bl	8004450 <__malloc_unlock>
 8004438:	e794      	b.n	8004364 <_malloc_r+0x20>
 800443a:	6005      	str	r5, [r0, #0]
 800443c:	e7d6      	b.n	80043ec <_malloc_r+0xa8>
 800443e:	bf00      	nop
 8004440:	200002b0 	.word	0x200002b0

08004444 <__malloc_lock>:
 8004444:	4801      	ldr	r0, [pc, #4]	@ (800444c <__malloc_lock+0x8>)
 8004446:	f7ff bf0e 	b.w	8004266 <__retarget_lock_acquire_recursive>
 800444a:	bf00      	nop
 800444c:	200002a8 	.word	0x200002a8

08004450 <__malloc_unlock>:
 8004450:	4801      	ldr	r0, [pc, #4]	@ (8004458 <__malloc_unlock+0x8>)
 8004452:	f7ff bf09 	b.w	8004268 <__retarget_lock_release_recursive>
 8004456:	bf00      	nop
 8004458:	200002a8 	.word	0x200002a8

0800445c <__sfputc_r>:
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	3b01      	subs	r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	b410      	push	{r4}
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	da08      	bge.n	800447a <__sfputc_r+0x1e>
 8004468:	6994      	ldr	r4, [r2, #24]
 800446a:	42a3      	cmp	r3, r4
 800446c:	db01      	blt.n	8004472 <__sfputc_r+0x16>
 800446e:	290a      	cmp	r1, #10
 8004470:	d103      	bne.n	800447a <__sfputc_r+0x1e>
 8004472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004476:	f7ff bde8 	b.w	800404a <__swbuf_r>
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	1c58      	adds	r0, r3, #1
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	7019      	strb	r1, [r3, #0]
 8004482:	4608      	mov	r0, r1
 8004484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004488:	4770      	bx	lr

0800448a <__sfputs_r>:
 800448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448c:	4606      	mov	r6, r0
 800448e:	460f      	mov	r7, r1
 8004490:	4614      	mov	r4, r2
 8004492:	18d5      	adds	r5, r2, r3
 8004494:	42ac      	cmp	r4, r5
 8004496:	d101      	bne.n	800449c <__sfputs_r+0x12>
 8004498:	2000      	movs	r0, #0
 800449a:	e007      	b.n	80044ac <__sfputs_r+0x22>
 800449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a0:	463a      	mov	r2, r7
 80044a2:	4630      	mov	r0, r6
 80044a4:	f7ff ffda 	bl	800445c <__sfputc_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d1f3      	bne.n	8004494 <__sfputs_r+0xa>
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044b0 <_vfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	460d      	mov	r5, r1
 80044b6:	b09d      	sub	sp, #116	@ 0x74
 80044b8:	4614      	mov	r4, r2
 80044ba:	4698      	mov	r8, r3
 80044bc:	4606      	mov	r6, r0
 80044be:	b118      	cbz	r0, 80044c8 <_vfiprintf_r+0x18>
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b90b      	cbnz	r3, 80044c8 <_vfiprintf_r+0x18>
 80044c4:	f7ff fcd8 	bl	8003e78 <__sinit>
 80044c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044ca:	07d9      	lsls	r1, r3, #31
 80044cc:	d405      	bmi.n	80044da <_vfiprintf_r+0x2a>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d402      	bmi.n	80044da <_vfiprintf_r+0x2a>
 80044d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d6:	f7ff fec6 	bl	8004266 <__retarget_lock_acquire_recursive>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	d501      	bpl.n	80044e4 <_vfiprintf_r+0x34>
 80044e0:	692b      	ldr	r3, [r5, #16]
 80044e2:	b99b      	cbnz	r3, 800450c <_vfiprintf_r+0x5c>
 80044e4:	4629      	mov	r1, r5
 80044e6:	4630      	mov	r0, r6
 80044e8:	f7ff fdee 	bl	80040c8 <__swsetup_r>
 80044ec:	b170      	cbz	r0, 800450c <_vfiprintf_r+0x5c>
 80044ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044f0:	07dc      	lsls	r4, r3, #31
 80044f2:	d504      	bpl.n	80044fe <_vfiprintf_r+0x4e>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b01d      	add	sp, #116	@ 0x74
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	0598      	lsls	r0, r3, #22
 8004502:	d4f7      	bmi.n	80044f4 <_vfiprintf_r+0x44>
 8004504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004506:	f7ff feaf 	bl	8004268 <__retarget_lock_release_recursive>
 800450a:	e7f3      	b.n	80044f4 <_vfiprintf_r+0x44>
 800450c:	2300      	movs	r3, #0
 800450e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004510:	2320      	movs	r3, #32
 8004512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004516:	f8cd 800c 	str.w	r8, [sp, #12]
 800451a:	2330      	movs	r3, #48	@ 0x30
 800451c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046cc <_vfiprintf_r+0x21c>
 8004520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004524:	f04f 0901 	mov.w	r9, #1
 8004528:	4623      	mov	r3, r4
 800452a:	469a      	mov	sl, r3
 800452c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004530:	b10a      	cbz	r2, 8004536 <_vfiprintf_r+0x86>
 8004532:	2a25      	cmp	r2, #37	@ 0x25
 8004534:	d1f9      	bne.n	800452a <_vfiprintf_r+0x7a>
 8004536:	ebba 0b04 	subs.w	fp, sl, r4
 800453a:	d00b      	beq.n	8004554 <_vfiprintf_r+0xa4>
 800453c:	465b      	mov	r3, fp
 800453e:	4622      	mov	r2, r4
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ffa1 	bl	800448a <__sfputs_r>
 8004548:	3001      	adds	r0, #1
 800454a:	f000 80a7 	beq.w	800469c <_vfiprintf_r+0x1ec>
 800454e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004550:	445a      	add	r2, fp
 8004552:	9209      	str	r2, [sp, #36]	@ 0x24
 8004554:	f89a 3000 	ldrb.w	r3, [sl]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 809f 	beq.w	800469c <_vfiprintf_r+0x1ec>
 800455e:	2300      	movs	r3, #0
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004568:	f10a 0a01 	add.w	sl, sl, #1
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	9307      	str	r3, [sp, #28]
 8004570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004574:	931a      	str	r3, [sp, #104]	@ 0x68
 8004576:	4654      	mov	r4, sl
 8004578:	2205      	movs	r2, #5
 800457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457e:	4853      	ldr	r0, [pc, #332]	@ (80046cc <_vfiprintf_r+0x21c>)
 8004580:	f7fb fe26 	bl	80001d0 <memchr>
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	b9d8      	cbnz	r0, 80045c0 <_vfiprintf_r+0x110>
 8004588:	06d1      	lsls	r1, r2, #27
 800458a:	bf44      	itt	mi
 800458c:	2320      	movmi	r3, #32
 800458e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004592:	0713      	lsls	r3, r2, #28
 8004594:	bf44      	itt	mi
 8004596:	232b      	movmi	r3, #43	@ 0x2b
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800459c:	f89a 3000 	ldrb.w	r3, [sl]
 80045a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a2:	d015      	beq.n	80045d0 <_vfiprintf_r+0x120>
 80045a4:	9a07      	ldr	r2, [sp, #28]
 80045a6:	4654      	mov	r4, sl
 80045a8:	2000      	movs	r0, #0
 80045aa:	f04f 0c0a 	mov.w	ip, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045b4:	3b30      	subs	r3, #48	@ 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d94b      	bls.n	8004652 <_vfiprintf_r+0x1a2>
 80045ba:	b1b0      	cbz	r0, 80045ea <_vfiprintf_r+0x13a>
 80045bc:	9207      	str	r2, [sp, #28]
 80045be:	e014      	b.n	80045ea <_vfiprintf_r+0x13a>
 80045c0:	eba0 0308 	sub.w	r3, r0, r8
 80045c4:	fa09 f303 	lsl.w	r3, r9, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	46a2      	mov	sl, r4
 80045ce:	e7d2      	b.n	8004576 <_vfiprintf_r+0xc6>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9103      	str	r1, [sp, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfbb      	ittet	lt
 80045dc:	425b      	neglt	r3, r3
 80045de:	f042 0202 	orrlt.w	r2, r2, #2
 80045e2:	9307      	strge	r3, [sp, #28]
 80045e4:	9307      	strlt	r3, [sp, #28]
 80045e6:	bfb8      	it	lt
 80045e8:	9204      	strlt	r2, [sp, #16]
 80045ea:	7823      	ldrb	r3, [r4, #0]
 80045ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ee:	d10a      	bne.n	8004606 <_vfiprintf_r+0x156>
 80045f0:	7863      	ldrb	r3, [r4, #1]
 80045f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045f4:	d132      	bne.n	800465c <_vfiprintf_r+0x1ac>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	1d1a      	adds	r2, r3, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	9203      	str	r2, [sp, #12]
 80045fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004602:	3402      	adds	r4, #2
 8004604:	9305      	str	r3, [sp, #20]
 8004606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046dc <_vfiprintf_r+0x22c>
 800460a:	7821      	ldrb	r1, [r4, #0]
 800460c:	2203      	movs	r2, #3
 800460e:	4650      	mov	r0, sl
 8004610:	f7fb fdde 	bl	80001d0 <memchr>
 8004614:	b138      	cbz	r0, 8004626 <_vfiprintf_r+0x176>
 8004616:	9b04      	ldr	r3, [sp, #16]
 8004618:	eba0 000a 	sub.w	r0, r0, sl
 800461c:	2240      	movs	r2, #64	@ 0x40
 800461e:	4082      	lsls	r2, r0
 8004620:	4313      	orrs	r3, r2
 8004622:	3401      	adds	r4, #1
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800462a:	4829      	ldr	r0, [pc, #164]	@ (80046d0 <_vfiprintf_r+0x220>)
 800462c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004630:	2206      	movs	r2, #6
 8004632:	f7fb fdcd 	bl	80001d0 <memchr>
 8004636:	2800      	cmp	r0, #0
 8004638:	d03f      	beq.n	80046ba <_vfiprintf_r+0x20a>
 800463a:	4b26      	ldr	r3, [pc, #152]	@ (80046d4 <_vfiprintf_r+0x224>)
 800463c:	bb1b      	cbnz	r3, 8004686 <_vfiprintf_r+0x1d6>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	3307      	adds	r3, #7
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	3308      	adds	r3, #8
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800464c:	443b      	add	r3, r7
 800464e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004650:	e76a      	b.n	8004528 <_vfiprintf_r+0x78>
 8004652:	fb0c 3202 	mla	r2, ip, r2, r3
 8004656:	460c      	mov	r4, r1
 8004658:	2001      	movs	r0, #1
 800465a:	e7a8      	b.n	80045ae <_vfiprintf_r+0xfe>
 800465c:	2300      	movs	r3, #0
 800465e:	3401      	adds	r4, #1
 8004660:	9305      	str	r3, [sp, #20]
 8004662:	4619      	mov	r1, r3
 8004664:	f04f 0c0a 	mov.w	ip, #10
 8004668:	4620      	mov	r0, r4
 800466a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800466e:	3a30      	subs	r2, #48	@ 0x30
 8004670:	2a09      	cmp	r2, #9
 8004672:	d903      	bls.n	800467c <_vfiprintf_r+0x1cc>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0c6      	beq.n	8004606 <_vfiprintf_r+0x156>
 8004678:	9105      	str	r1, [sp, #20]
 800467a:	e7c4      	b.n	8004606 <_vfiprintf_r+0x156>
 800467c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004680:	4604      	mov	r4, r0
 8004682:	2301      	movs	r3, #1
 8004684:	e7f0      	b.n	8004668 <_vfiprintf_r+0x1b8>
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <_vfiprintf_r+0x228>)
 800468e:	a904      	add	r1, sp, #16
 8004690:	4630      	mov	r0, r6
 8004692:	f3af 8000 	nop.w
 8004696:	4607      	mov	r7, r0
 8004698:	1c78      	adds	r0, r7, #1
 800469a:	d1d6      	bne.n	800464a <_vfiprintf_r+0x19a>
 800469c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_vfiprintf_r+0x1fe>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	059a      	lsls	r2, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_vfiprintf_r+0x1fe>
 80046a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046aa:	f7ff fddd 	bl	8004268 <__retarget_lock_release_recursive>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	065b      	lsls	r3, r3, #25
 80046b2:	f53f af1f 	bmi.w	80044f4 <_vfiprintf_r+0x44>
 80046b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046b8:	e71e      	b.n	80044f8 <_vfiprintf_r+0x48>
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	462a      	mov	r2, r5
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <_vfiprintf_r+0x228>)
 80046c2:	a904      	add	r1, sp, #16
 80046c4:	4630      	mov	r0, r6
 80046c6:	f000 f879 	bl	80047bc <_printf_i>
 80046ca:	e7e4      	b.n	8004696 <_vfiprintf_r+0x1e6>
 80046cc:	08004d0c 	.word	0x08004d0c
 80046d0:	08004d16 	.word	0x08004d16
 80046d4:	00000000 	.word	0x00000000
 80046d8:	0800448b 	.word	0x0800448b
 80046dc:	08004d12 	.word	0x08004d12

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4616      	mov	r6, r2
 80046e6:	4698      	mov	r8, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bfb8      	it	lt
 80046f4:	4613      	movlt	r3, r2
 80046f6:	6033      	str	r3, [r6, #0]
 80046f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046fc:	4607      	mov	r7, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b10a      	cbz	r2, 8004706 <_printf_common+0x26>
 8004702:	3301      	adds	r3, #1
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	6833      	ldrmi	r3, [r6, #0]
 800470e:	3302      	addmi	r3, #2
 8004710:	6033      	strmi	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f015 0506 	ands.w	r5, r5, #6
 8004718:	d106      	bne.n	8004728 <_printf_common+0x48>
 800471a:	f104 0a19 	add.w	sl, r4, #25
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	42ab      	cmp	r3, r5
 8004726:	dc26      	bgt.n	8004776 <_printf_common+0x96>
 8004728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	3b00      	subs	r3, #0
 8004730:	bf18      	it	ne
 8004732:	2301      	movne	r3, #1
 8004734:	0692      	lsls	r2, r2, #26
 8004736:	d42b      	bmi.n	8004790 <_printf_common+0xb0>
 8004738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800473c:	4641      	mov	r1, r8
 800473e:	4638      	mov	r0, r7
 8004740:	47c8      	blx	r9
 8004742:	3001      	adds	r0, #1
 8004744:	d01e      	beq.n	8004784 <_printf_common+0xa4>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	f003 0306 	and.w	r3, r3, #6
 800474e:	2b04      	cmp	r3, #4
 8004750:	bf02      	ittt	eq
 8004752:	68e5      	ldreq	r5, [r4, #12]
 8004754:	6833      	ldreq	r3, [r6, #0]
 8004756:	1aed      	subeq	r5, r5, r3
 8004758:	68a3      	ldr	r3, [r4, #8]
 800475a:	bf0c      	ite	eq
 800475c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004760:	2500      	movne	r5, #0
 8004762:	4293      	cmp	r3, r2
 8004764:	bfc4      	itt	gt
 8004766:	1a9b      	subgt	r3, r3, r2
 8004768:	18ed      	addgt	r5, r5, r3
 800476a:	2600      	movs	r6, #0
 800476c:	341a      	adds	r4, #26
 800476e:	42b5      	cmp	r5, r6
 8004770:	d11a      	bne.n	80047a8 <_printf_common+0xc8>
 8004772:	2000      	movs	r0, #0
 8004774:	e008      	b.n	8004788 <_printf_common+0xa8>
 8004776:	2301      	movs	r3, #1
 8004778:	4652      	mov	r2, sl
 800477a:	4641      	mov	r1, r8
 800477c:	4638      	mov	r0, r7
 800477e:	47c8      	blx	r9
 8004780:	3001      	adds	r0, #1
 8004782:	d103      	bne.n	800478c <_printf_common+0xac>
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	3501      	adds	r5, #1
 800478e:	e7c6      	b.n	800471e <_printf_common+0x3e>
 8004790:	18e1      	adds	r1, r4, r3
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	2030      	movs	r0, #48	@ 0x30
 8004796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800479a:	4422      	add	r2, r4
 800479c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047a4:	3302      	adds	r3, #2
 80047a6:	e7c7      	b.n	8004738 <_printf_common+0x58>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4622      	mov	r2, r4
 80047ac:	4641      	mov	r1, r8
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c8      	blx	r9
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0e6      	beq.n	8004784 <_printf_common+0xa4>
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7d9      	b.n	800476e <_printf_common+0x8e>
	...

080047bc <_printf_i>:
 80047bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	7e0f      	ldrb	r7, [r1, #24]
 80047c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047c4:	2f78      	cmp	r7, #120	@ 0x78
 80047c6:	4691      	mov	r9, r2
 80047c8:	4680      	mov	r8, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	469a      	mov	sl, r3
 80047ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047d2:	d807      	bhi.n	80047e4 <_printf_i+0x28>
 80047d4:	2f62      	cmp	r7, #98	@ 0x62
 80047d6:	d80a      	bhi.n	80047ee <_printf_i+0x32>
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f000 80d2 	beq.w	8004982 <_printf_i+0x1c6>
 80047de:	2f58      	cmp	r7, #88	@ 0x58
 80047e0:	f000 80b9 	beq.w	8004956 <_printf_i+0x19a>
 80047e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047ec:	e03a      	b.n	8004864 <_printf_i+0xa8>
 80047ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047f2:	2b15      	cmp	r3, #21
 80047f4:	d8f6      	bhi.n	80047e4 <_printf_i+0x28>
 80047f6:	a101      	add	r1, pc, #4	@ (adr r1, 80047fc <_printf_i+0x40>)
 80047f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004869 	.word	0x08004869
 8004804:	080047e5 	.word	0x080047e5
 8004808:	080047e5 	.word	0x080047e5
 800480c:	080047e5 	.word	0x080047e5
 8004810:	080047e5 	.word	0x080047e5
 8004814:	08004869 	.word	0x08004869
 8004818:	080047e5 	.word	0x080047e5
 800481c:	080047e5 	.word	0x080047e5
 8004820:	080047e5 	.word	0x080047e5
 8004824:	080047e5 	.word	0x080047e5
 8004828:	08004969 	.word	0x08004969
 800482c:	08004893 	.word	0x08004893
 8004830:	08004923 	.word	0x08004923
 8004834:	080047e5 	.word	0x080047e5
 8004838:	080047e5 	.word	0x080047e5
 800483c:	0800498b 	.word	0x0800498b
 8004840:	080047e5 	.word	0x080047e5
 8004844:	08004893 	.word	0x08004893
 8004848:	080047e5 	.word	0x080047e5
 800484c:	080047e5 	.word	0x080047e5
 8004850:	0800492b 	.word	0x0800492b
 8004854:	6833      	ldr	r3, [r6, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6032      	str	r2, [r6, #0]
 800485c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004864:	2301      	movs	r3, #1
 8004866:	e09d      	b.n	80049a4 <_printf_i+0x1e8>
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	1d19      	adds	r1, r3, #4
 800486e:	6031      	str	r1, [r6, #0]
 8004870:	0606      	lsls	r6, r0, #24
 8004872:	d501      	bpl.n	8004878 <_printf_i+0xbc>
 8004874:	681d      	ldr	r5, [r3, #0]
 8004876:	e003      	b.n	8004880 <_printf_i+0xc4>
 8004878:	0645      	lsls	r5, r0, #25
 800487a:	d5fb      	bpl.n	8004874 <_printf_i+0xb8>
 800487c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004880:	2d00      	cmp	r5, #0
 8004882:	da03      	bge.n	800488c <_printf_i+0xd0>
 8004884:	232d      	movs	r3, #45	@ 0x2d
 8004886:	426d      	negs	r5, r5
 8004888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800488c:	4859      	ldr	r0, [pc, #356]	@ (80049f4 <_printf_i+0x238>)
 800488e:	230a      	movs	r3, #10
 8004890:	e011      	b.n	80048b6 <_printf_i+0xfa>
 8004892:	6821      	ldr	r1, [r4, #0]
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	0608      	lsls	r0, r1, #24
 8004898:	f853 5b04 	ldr.w	r5, [r3], #4
 800489c:	d402      	bmi.n	80048a4 <_printf_i+0xe8>
 800489e:	0649      	lsls	r1, r1, #25
 80048a0:	bf48      	it	mi
 80048a2:	b2ad      	uxthmi	r5, r5
 80048a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048a6:	4853      	ldr	r0, [pc, #332]	@ (80049f4 <_printf_i+0x238>)
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	bf14      	ite	ne
 80048ac:	230a      	movne	r3, #10
 80048ae:	2308      	moveq	r3, #8
 80048b0:	2100      	movs	r1, #0
 80048b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048b6:	6866      	ldr	r6, [r4, #4]
 80048b8:	60a6      	str	r6, [r4, #8]
 80048ba:	2e00      	cmp	r6, #0
 80048bc:	bfa2      	ittt	ge
 80048be:	6821      	ldrge	r1, [r4, #0]
 80048c0:	f021 0104 	bicge.w	r1, r1, #4
 80048c4:	6021      	strge	r1, [r4, #0]
 80048c6:	b90d      	cbnz	r5, 80048cc <_printf_i+0x110>
 80048c8:	2e00      	cmp	r6, #0
 80048ca:	d04b      	beq.n	8004964 <_printf_i+0x1a8>
 80048cc:	4616      	mov	r6, r2
 80048ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80048d2:	fb03 5711 	mls	r7, r3, r1, r5
 80048d6:	5dc7      	ldrb	r7, [r0, r7]
 80048d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048dc:	462f      	mov	r7, r5
 80048de:	42bb      	cmp	r3, r7
 80048e0:	460d      	mov	r5, r1
 80048e2:	d9f4      	bls.n	80048ce <_printf_i+0x112>
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d10b      	bne.n	8004900 <_printf_i+0x144>
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07df      	lsls	r7, r3, #31
 80048ec:	d508      	bpl.n	8004900 <_printf_i+0x144>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4299      	cmp	r1, r3
 80048f4:	bfde      	ittt	le
 80048f6:	2330      	movle	r3, #48	@ 0x30
 80048f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004900:	1b92      	subs	r2, r2, r6
 8004902:	6122      	str	r2, [r4, #16]
 8004904:	f8cd a000 	str.w	sl, [sp]
 8004908:	464b      	mov	r3, r9
 800490a:	aa03      	add	r2, sp, #12
 800490c:	4621      	mov	r1, r4
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fee6 	bl	80046e0 <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	d14a      	bne.n	80049ae <_printf_i+0x1f2>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	b004      	add	sp, #16
 800491e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	4833      	ldr	r0, [pc, #204]	@ (80049f8 <_printf_i+0x23c>)
 800492c:	2778      	movs	r7, #120	@ 0x78
 800492e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6831      	ldr	r1, [r6, #0]
 8004936:	061f      	lsls	r7, r3, #24
 8004938:	f851 5b04 	ldr.w	r5, [r1], #4
 800493c:	d402      	bmi.n	8004944 <_printf_i+0x188>
 800493e:	065f      	lsls	r7, r3, #25
 8004940:	bf48      	it	mi
 8004942:	b2ad      	uxthmi	r5, r5
 8004944:	6031      	str	r1, [r6, #0]
 8004946:	07d9      	lsls	r1, r3, #31
 8004948:	bf44      	itt	mi
 800494a:	f043 0320 	orrmi.w	r3, r3, #32
 800494e:	6023      	strmi	r3, [r4, #0]
 8004950:	b11d      	cbz	r5, 800495a <_printf_i+0x19e>
 8004952:	2310      	movs	r3, #16
 8004954:	e7ac      	b.n	80048b0 <_printf_i+0xf4>
 8004956:	4827      	ldr	r0, [pc, #156]	@ (80049f4 <_printf_i+0x238>)
 8004958:	e7e9      	b.n	800492e <_printf_i+0x172>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	f023 0320 	bic.w	r3, r3, #32
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	e7f6      	b.n	8004952 <_printf_i+0x196>
 8004964:	4616      	mov	r6, r2
 8004966:	e7bd      	b.n	80048e4 <_printf_i+0x128>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	6961      	ldr	r1, [r4, #20]
 800496e:	1d18      	adds	r0, r3, #4
 8004970:	6030      	str	r0, [r6, #0]
 8004972:	062e      	lsls	r6, r5, #24
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	d501      	bpl.n	800497c <_printf_i+0x1c0>
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	e002      	b.n	8004982 <_printf_i+0x1c6>
 800497c:	0668      	lsls	r0, r5, #25
 800497e:	d5fb      	bpl.n	8004978 <_printf_i+0x1bc>
 8004980:	8019      	strh	r1, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	4616      	mov	r6, r2
 8004988:	e7bc      	b.n	8004904 <_printf_i+0x148>
 800498a:	6833      	ldr	r3, [r6, #0]
 800498c:	1d1a      	adds	r2, r3, #4
 800498e:	6032      	str	r2, [r6, #0]
 8004990:	681e      	ldr	r6, [r3, #0]
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	2100      	movs	r1, #0
 8004996:	4630      	mov	r0, r6
 8004998:	f7fb fc1a 	bl	80001d0 <memchr>
 800499c:	b108      	cbz	r0, 80049a2 <_printf_i+0x1e6>
 800499e:	1b80      	subs	r0, r0, r6
 80049a0:	6060      	str	r0, [r4, #4]
 80049a2:	6863      	ldr	r3, [r4, #4]
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	2300      	movs	r3, #0
 80049a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ac:	e7aa      	b.n	8004904 <_printf_i+0x148>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	4632      	mov	r2, r6
 80049b2:	4649      	mov	r1, r9
 80049b4:	4640      	mov	r0, r8
 80049b6:	47d0      	blx	sl
 80049b8:	3001      	adds	r0, #1
 80049ba:	d0ad      	beq.n	8004918 <_printf_i+0x15c>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	079b      	lsls	r3, r3, #30
 80049c0:	d413      	bmi.n	80049ea <_printf_i+0x22e>
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	4298      	cmp	r0, r3
 80049c8:	bfb8      	it	lt
 80049ca:	4618      	movlt	r0, r3
 80049cc:	e7a6      	b.n	800491c <_printf_i+0x160>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d09d      	beq.n	8004918 <_printf_i+0x15c>
 80049dc:	3501      	adds	r5, #1
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	9903      	ldr	r1, [sp, #12]
 80049e2:	1a5b      	subs	r3, r3, r1
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dcf2      	bgt.n	80049ce <_printf_i+0x212>
 80049e8:	e7eb      	b.n	80049c2 <_printf_i+0x206>
 80049ea:	2500      	movs	r5, #0
 80049ec:	f104 0619 	add.w	r6, r4, #25
 80049f0:	e7f5      	b.n	80049de <_printf_i+0x222>
 80049f2:	bf00      	nop
 80049f4:	08004d1d 	.word	0x08004d1d
 80049f8:	08004d2e 	.word	0x08004d2e

080049fc <__sflush_r>:
 80049fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	0716      	lsls	r6, r2, #28
 8004a06:	4605      	mov	r5, r0
 8004a08:	460c      	mov	r4, r1
 8004a0a:	d454      	bmi.n	8004ab6 <__sflush_r+0xba>
 8004a0c:	684b      	ldr	r3, [r1, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	dc02      	bgt.n	8004a18 <__sflush_r+0x1c>
 8004a12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dd48      	ble.n	8004aaa <__sflush_r+0xae>
 8004a18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d045      	beq.n	8004aaa <__sflush_r+0xae>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a24:	682f      	ldr	r7, [r5, #0]
 8004a26:	6a21      	ldr	r1, [r4, #32]
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	d030      	beq.n	8004a8e <__sflush_r+0x92>
 8004a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	0759      	lsls	r1, r3, #29
 8004a32:	d505      	bpl.n	8004a40 <__sflush_r+0x44>
 8004a34:	6863      	ldr	r3, [r4, #4]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a3a:	b10b      	cbz	r3, 8004a40 <__sflush_r+0x44>
 8004a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	2300      	movs	r3, #0
 8004a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b0      	blx	r6
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	d106      	bne.n	8004a5e <__sflush_r+0x62>
 8004a50:	6829      	ldr	r1, [r5, #0]
 8004a52:	291d      	cmp	r1, #29
 8004a54:	d82b      	bhi.n	8004aae <__sflush_r+0xb2>
 8004a56:	4a2a      	ldr	r2, [pc, #168]	@ (8004b00 <__sflush_r+0x104>)
 8004a58:	410a      	asrs	r2, r1
 8004a5a:	07d6      	lsls	r6, r2, #31
 8004a5c:	d427      	bmi.n	8004aae <__sflush_r+0xb2>
 8004a5e:	2200      	movs	r2, #0
 8004a60:	6062      	str	r2, [r4, #4]
 8004a62:	04d9      	lsls	r1, r3, #19
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	6022      	str	r2, [r4, #0]
 8004a68:	d504      	bpl.n	8004a74 <__sflush_r+0x78>
 8004a6a:	1c42      	adds	r2, r0, #1
 8004a6c:	d101      	bne.n	8004a72 <__sflush_r+0x76>
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	b903      	cbnz	r3, 8004a74 <__sflush_r+0x78>
 8004a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a76:	602f      	str	r7, [r5, #0]
 8004a78:	b1b9      	cbz	r1, 8004aaa <__sflush_r+0xae>
 8004a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d002      	beq.n	8004a88 <__sflush_r+0x8c>
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7ff fbf2 	bl	800426c <_free_r>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a8c:	e00d      	b.n	8004aaa <__sflush_r+0xae>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4628      	mov	r0, r5
 8004a92:	47b0      	blx	r6
 8004a94:	4602      	mov	r2, r0
 8004a96:	1c50      	adds	r0, r2, #1
 8004a98:	d1c9      	bne.n	8004a2e <__sflush_r+0x32>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0c6      	beq.n	8004a2e <__sflush_r+0x32>
 8004aa0:	2b1d      	cmp	r3, #29
 8004aa2:	d001      	beq.n	8004aa8 <__sflush_r+0xac>
 8004aa4:	2b16      	cmp	r3, #22
 8004aa6:	d11e      	bne.n	8004ae6 <__sflush_r+0xea>
 8004aa8:	602f      	str	r7, [r5, #0]
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e022      	b.n	8004af4 <__sflush_r+0xf8>
 8004aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	e01b      	b.n	8004aee <__sflush_r+0xf2>
 8004ab6:	690f      	ldr	r7, [r1, #16]
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	d0f6      	beq.n	8004aaa <__sflush_r+0xae>
 8004abc:	0793      	lsls	r3, r2, #30
 8004abe:	680e      	ldr	r6, [r1, #0]
 8004ac0:	bf08      	it	eq
 8004ac2:	694b      	ldreq	r3, [r1, #20]
 8004ac4:	600f      	str	r7, [r1, #0]
 8004ac6:	bf18      	it	ne
 8004ac8:	2300      	movne	r3, #0
 8004aca:	eba6 0807 	sub.w	r8, r6, r7
 8004ace:	608b      	str	r3, [r1, #8]
 8004ad0:	f1b8 0f00 	cmp.w	r8, #0
 8004ad4:	dde9      	ble.n	8004aaa <__sflush_r+0xae>
 8004ad6:	6a21      	ldr	r1, [r4, #32]
 8004ad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ada:	4643      	mov	r3, r8
 8004adc:	463a      	mov	r2, r7
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b0      	blx	r6
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	dc08      	bgt.n	8004af8 <__sflush_r+0xfc>
 8004ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af8:	4407      	add	r7, r0
 8004afa:	eba8 0800 	sub.w	r8, r8, r0
 8004afe:	e7e7      	b.n	8004ad0 <__sflush_r+0xd4>
 8004b00:	dfbffffe 	.word	0xdfbffffe

08004b04 <_fflush_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	690b      	ldr	r3, [r1, #16]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b913      	cbnz	r3, 8004b14 <_fflush_r+0x10>
 8004b0e:	2500      	movs	r5, #0
 8004b10:	4628      	mov	r0, r5
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	b118      	cbz	r0, 8004b1e <_fflush_r+0x1a>
 8004b16:	6a03      	ldr	r3, [r0, #32]
 8004b18:	b90b      	cbnz	r3, 8004b1e <_fflush_r+0x1a>
 8004b1a:	f7ff f9ad 	bl	8003e78 <__sinit>
 8004b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f3      	beq.n	8004b0e <_fflush_r+0xa>
 8004b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b28:	07d0      	lsls	r0, r2, #31
 8004b2a:	d404      	bmi.n	8004b36 <_fflush_r+0x32>
 8004b2c:	0599      	lsls	r1, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_fflush_r+0x32>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f7ff fb98 	bl	8004266 <__retarget_lock_acquire_recursive>
 8004b36:	4628      	mov	r0, r5
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f7ff ff5f 	bl	80049fc <__sflush_r>
 8004b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b40:	07da      	lsls	r2, r3, #31
 8004b42:	4605      	mov	r5, r0
 8004b44:	d4e4      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	059b      	lsls	r3, r3, #22
 8004b4a:	d4e1      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b4e:	f7ff fb8b 	bl	8004268 <__retarget_lock_release_recursive>
 8004b52:	e7dd      	b.n	8004b10 <_fflush_r+0xc>

08004b54 <__swhatbuf_r>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	460c      	mov	r4, r1
 8004b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	b096      	sub	sp, #88	@ 0x58
 8004b60:	4615      	mov	r5, r2
 8004b62:	461e      	mov	r6, r3
 8004b64:	da0d      	bge.n	8004b82 <__swhatbuf_r+0x2e>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	bf14      	ite	ne
 8004b72:	2340      	movne	r3, #64	@ 0x40
 8004b74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b78:	2000      	movs	r0, #0
 8004b7a:	6031      	str	r1, [r6, #0]
 8004b7c:	602b      	str	r3, [r5, #0]
 8004b7e:	b016      	add	sp, #88	@ 0x58
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	466a      	mov	r2, sp
 8004b84:	f000 f848 	bl	8004c18 <_fstat_r>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	dbec      	blt.n	8004b66 <__swhatbuf_r+0x12>
 8004b8c:	9901      	ldr	r1, [sp, #4]
 8004b8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b96:	4259      	negs	r1, r3
 8004b98:	4159      	adcs	r1, r3
 8004b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b9e:	e7eb      	b.n	8004b78 <__swhatbuf_r+0x24>

08004ba0 <__smakebuf_r>:
 8004ba0:	898b      	ldrh	r3, [r1, #12]
 8004ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ba4:	079d      	lsls	r5, r3, #30
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	d507      	bpl.n	8004bbc <__smakebuf_r+0x1c>
 8004bac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	6163      	str	r3, [r4, #20]
 8004bb8:	b003      	add	sp, #12
 8004bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bbc:	ab01      	add	r3, sp, #4
 8004bbe:	466a      	mov	r2, sp
 8004bc0:	f7ff ffc8 	bl	8004b54 <__swhatbuf_r>
 8004bc4:	9f00      	ldr	r7, [sp, #0]
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff fbba 	bl	8004344 <_malloc_r>
 8004bd0:	b948      	cbnz	r0, 8004be6 <__smakebuf_r+0x46>
 8004bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd6:	059a      	lsls	r2, r3, #22
 8004bd8:	d4ee      	bmi.n	8004bb8 <__smakebuf_r+0x18>
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	f043 0302 	orr.w	r3, r3, #2
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	e7e2      	b.n	8004bac <__smakebuf_r+0xc>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	6020      	str	r0, [r4, #0]
 8004bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	9b01      	ldr	r3, [sp, #4]
 8004bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bf6:	b15b      	cbz	r3, 8004c10 <__smakebuf_r+0x70>
 8004bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f000 f81d 	bl	8004c3c <_isatty_r>
 8004c02:	b128      	cbz	r0, 8004c10 <__smakebuf_r+0x70>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	431d      	orrs	r5, r3
 8004c14:	81a5      	strh	r5, [r4, #12]
 8004c16:	e7cf      	b.n	8004bb8 <__smakebuf_r+0x18>

08004c18 <_fstat_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	@ (8004c38 <_fstat_r+0x20>)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	f7fb fec9 	bl	80009bc <_fstat>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d102      	bne.n	8004c34 <_fstat_r+0x1c>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	b103      	cbz	r3, 8004c34 <_fstat_r+0x1c>
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	200002a4 	.word	0x200002a4

08004c3c <_isatty_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d06      	ldr	r5, [pc, #24]	@ (8004c58 <_isatty_r+0x1c>)
 8004c40:	2300      	movs	r3, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	f7fb fec8 	bl	80009dc <_isatty>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_isatty_r+0x1a>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_isatty_r+0x1a>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	200002a4 	.word	0x200002a4

08004c5c <_sbrk_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d06      	ldr	r5, [pc, #24]	@ (8004c78 <_sbrk_r+0x1c>)
 8004c60:	2300      	movs	r3, #0
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fb fed0 	bl	8000a0c <_sbrk>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_sbrk_r+0x1a>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_sbrk_r+0x1a>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	200002a4 	.word	0x200002a4

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
